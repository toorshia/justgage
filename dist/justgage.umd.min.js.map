{
  "version": 3,
  "sources": ["../src/index.js", "../src/utils/helpers.js", "../src/core/config.js", "../src/rendering/svg.js", "../src/utils/colors.js", "../src/utils/formatters.js", "../src/core/JustGage.js"],
  "sourcesContent": ["/**\n * JustGage - Modern SVG Gauges\n * Entry point for the library\n *\n * @version 2.0.0\n * @author Bojan Djuricic (@Toorshia)\n * @license MIT\n */\n\nimport { JustGage } from './core/JustGage.js';\n\n// Export the main class\nexport { JustGage };\n\n// Default export for easier importing\nexport default JustGage;\n\n// Version info\nexport const VERSION = '2.0.0';\n\n// For backward compatibility in browser environments\nif (typeof window !== 'undefined') {\n  window.JustGage = JustGage;\n}\n", "/**\n * General utility functions for JustGage\n */\n\n/**\n * Check if a value is undefined or null\n * @param {any} v - Value to check\n * @returns {boolean} True if undefined or null\n */\nexport function isUndefined(v) {\n  return v === null || v === undefined;\n}\n\n/**\n * Check if a value is a valid number\n * @param {any} n - Value to check\n * @returns {boolean} True if valid number\n */\nexport function isNumber(n) {\n  return n !== null && n !== undefined && !isNaN(n);\n}\n\n/**\n * Extend target object with properties from source objects\n * @param {object} out - Target object\n * @param {...object} sources - Source objects\n * @returns {object} Extended object\n */\nexport function extend(out, ...sources) {\n  out = out || {};\n\n  for (const source of sources) {\n    if (!source) {\n      continue;\n    }\n\n    for (const key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        out[key] = source[key];\n      }\n    }\n  }\n\n  return out;\n}\n\n/**\n * Generate a UUID v4\n * @returns {string} UUID string\n */\nexport function uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Lookup value from multiple hash tables with fallback\n * @param {string} key - Key to lookup\n * @param {object} tableA - First table\n * @param {object} tableB - Second table (e.g., dataset)\n * @param {any} defVal - Default value\n * @param {string} dataType - Data type conversion ('int', 'float')\n * @returns {any} Found value or default\n */\nexport function kvLookup(key, tableA, tableB, defVal, dataType) {\n  let val = defVal;\n  let canConvert = false;\n\n  if (!isUndefined(key)) {\n    if (!isUndefined(tableB) && typeof tableB === 'object' && key in tableB) {\n      val = tableB[key];\n      canConvert = true;\n    } else if (!isUndefined(tableA) && typeof tableA === 'object' && key in tableA) {\n      val = tableA[key];\n      canConvert = true;\n    } else {\n      val = defVal;\n    }\n\n    if (canConvert && !isUndefined(dataType)) {\n      switch (dataType) {\n        case 'int':\n          val = parseInt(val, 10);\n          break;\n        case 'float':\n          val = parseFloat(val);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  return val;\n}\n\n/**\n * Clamp a value between min and max\n * @param {number} value - Value to clamp\n * @param {number} min - Minimum value\n * @param {number} max - Maximum value\n * @returns {number} Clamped value\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Create a simple event emitter\n * @returns {object} Event emitter with on, off, and emit methods\n */\nexport function createEventEmitter() {\n  const events = {};\n\n  return {\n    on(event, callback) {\n      if (!events[event]) {\n        events[event] = [];\n      }\n      events[event].push(callback);\n    },\n\n    off(event, callback) {\n      if (!events[event]) return;\n\n      if (callback) {\n        const index = events[event].indexOf(callback);\n        if (index > -1) {\n          events[event].splice(index, 1);\n        }\n      } else {\n        events[event] = [];\n      }\n    },\n\n    emit(event, ...args) {\n      if (!events[event]) return;\n      events[event].forEach(callback => callback(...args));\n    },\n  };\n}\n", "/**\n * Configuration management for JustGage\n */\n\nimport { kvLookup, uuid, extend, isUndefined } from '../utils/helpers.js';\n\n/**\n * Default configuration values\n */\nexport const DEFAULT_CONFIG = {\n  value: 0,\n  min: 0,\n  max: 100,\n  reverse: false,\n  gaugeWidthScale: 1.0,\n  gaugeColor: '#edebeb',\n  label: '',\n  valueFontColor: '#010101',\n  valueFontFamily: 'Arial',\n  labelFontColor: '#b3b3b3',\n  labelFontFamily: 'Arial',\n  symbol: '',\n  shadowOpacity: 0.2,\n  shadowSize: 5,\n  shadowVerticalOffset: 3,\n  levelColors: ['#a9d70b', '#f9c802', '#ff0000'],\n  startAnimationTime: 700,\n  startAnimationType: '>',\n  refreshAnimationTime: 700,\n  refreshAnimationType: '>',\n  donutStartAngle: 90,\n  valueMinFontSize: 16,\n  labelMinFontSize: 10,\n  minLabelMinFontSize: 10,\n  maxLabelMinFontSize: 10,\n  hideValue: false,\n  hideMinMax: false,\n  showMinMax: true,\n  showInnerShadow: false,\n  humanFriendly: false,\n  humanFriendlyDecimal: 0,\n  noGradient: false,\n  donut: false,\n  differential: false,\n  relativeGaugeSize: false,\n  counter: false,\n  decimals: 0,\n  customSectors: {},\n  formatNumber: false,\n  pointer: false,\n  pointerOptions: {},\n  displayRemaining: false,\n  targetLine: null,\n  targetLineColor: '#000000',\n  targetLineWidth: 1.5,\n  textRenderer: null,\n  onAnimationEnd: null,\n  minTxt: false,\n  maxTxt: false,\n  defaults: false,\n  parentNode: null,\n  width: 400,\n  height: 320,\n  startAngle: 135,\n  endAngle: 405,\n  title: '',\n  titleFontColor: '#999999',\n  titleFontFamily: 'Arial',\n  titleFontSize: null, // Will use dynamic calculation if not specified\n  titleFontWeight: 'normal',\n  valueFontSize: null, // Will use dynamic calculation if not specified\n  valueFontWeight: 'normal',\n  labelFontSize: null, // Will use dynamic calculation if not specified\n  labelFontWeight: 'normal',\n  minMaxLabelFontSize: null, // Will use dynamic calculation if not specified\n};\n\n/**\n * Create and validate configuration object\n * @param {object} config - User configuration\n * @param {object} dataset - Dataset from DOM element\n * @returns {object} Processed configuration\n */\nexport function createConfig(config, dataset = {}) {\n  if (isUndefined(config)) {\n    throw new Error('JustGage: Configuration object is required');\n  }\n\n  const { defaults, ...restConfig } = config;\n  if (defaults) {\n    config = extend({}, defaults, restConfig);\n  }\n\n  const processedConfig = {\n    // Generate unique class ID for styling\n    classId: uuid(),\n\n    // Core identification\n    id: config.id,\n    parentNode: kvLookup('parentNode', config, dataset, null),\n\n    // Dimensions\n    width: kvLookup('width', config, dataset, DEFAULT_CONFIG.width),\n    height: kvLookup('height', config, dataset, DEFAULT_CONFIG.height),\n\n    // Value settings\n    value: kvLookup('value', config, dataset, DEFAULT_CONFIG.value, 'float'),\n    min: kvLookup('min', config, dataset, DEFAULT_CONFIG.min, 'float'),\n    max: kvLookup('max', config, dataset, DEFAULT_CONFIG.max, 'float'),\n    minTxt: kvLookup('minTxt', config, dataset, DEFAULT_CONFIG.minTxt),\n    maxTxt: kvLookup('maxTxt', config, dataset, DEFAULT_CONFIG.maxTxt),\n    reverse: kvLookup('reverse', config, dataset, DEFAULT_CONFIG.reverse),\n\n    // Display settings\n    symbol: kvLookup('symbol', config, dataset, DEFAULT_CONFIG.symbol),\n    decimals: kvLookup('decimals', config, dataset, DEFAULT_CONFIG.decimals),\n    counter: kvLookup('counter', config, dataset, DEFAULT_CONFIG.counter),\n    hideValue: kvLookup('hideValue', config, dataset, DEFAULT_CONFIG.hideValue),\n    hideMinMax: kvLookup('hideMinMax', config, dataset, DEFAULT_CONFIG.hideMinMax),\n    showMinMax: kvLookup('showMinMax', config, dataset, DEFAULT_CONFIG.showMinMax),\n\n    // Fonts and colors\n    valueFontColor: kvLookup('valueFontColor', config, dataset, DEFAULT_CONFIG.valueFontColor),\n    valueFontFamily: kvLookup('valueFontFamily', config, dataset, DEFAULT_CONFIG.valueFontFamily),\n    labelFontColor: kvLookup('labelFontColor', config, dataset, DEFAULT_CONFIG.labelFontColor),\n    labelFontFamily: kvLookup('labelFontFamily', config, dataset, DEFAULT_CONFIG.labelFontFamily),\n\n    // Font sizes\n    valueMinFontSize: kvLookup(\n      'valueMinFontSize',\n      config,\n      dataset,\n      DEFAULT_CONFIG.valueMinFontSize\n    ),\n    labelMinFontSize: kvLookup(\n      'labelMinFontSize',\n      config,\n      dataset,\n      DEFAULT_CONFIG.labelMinFontSize\n    ),\n    minLabelMinFontSize: kvLookup(\n      'minLabelMinFontSize',\n      config,\n      dataset,\n      DEFAULT_CONFIG.minLabelMinFontSize\n    ),\n    maxLabelMinFontSize: kvLookup(\n      'maxLabelMinFontSize',\n      config,\n      dataset,\n      DEFAULT_CONFIG.maxLabelMinFontSize\n    ),\n\n    // Gauge appearance\n    gaugeWidthScale: kvLookup('gaugeWidthScale', config, dataset, DEFAULT_CONFIG.gaugeWidthScale),\n    gaugeColor: kvLookup('gaugeColor', config, dataset, DEFAULT_CONFIG.gaugeColor),\n    levelColors: kvLookup('levelColors', config, dataset, DEFAULT_CONFIG.levelColors),\n    noGradient: kvLookup('noGradient', config, dataset, DEFAULT_CONFIG.noGradient),\n\n    // Shadow settings\n    shadowOpacity: kvLookup('shadowOpacity', config, dataset, DEFAULT_CONFIG.shadowOpacity),\n    shadowSize: kvLookup('shadowSize', config, dataset, DEFAULT_CONFIG.shadowSize),\n    shadowVerticalOffset: kvLookup(\n      'shadowVerticalOffset',\n      config,\n      dataset,\n      DEFAULT_CONFIG.shadowVerticalOffset\n    ),\n    showInnerShadow: kvLookup('showInnerShadow', config, dataset, DEFAULT_CONFIG.showInnerShadow),\n\n    // Animation settings\n    startAnimationTime: kvLookup(\n      'startAnimationTime',\n      config,\n      dataset,\n      DEFAULT_CONFIG.startAnimationTime\n    ),\n    startAnimationType: kvLookup(\n      'startAnimationType',\n      config,\n      dataset,\n      DEFAULT_CONFIG.startAnimationType\n    ),\n    refreshAnimationTime: kvLookup(\n      'refreshAnimationTime',\n      config,\n      dataset,\n      DEFAULT_CONFIG.refreshAnimationTime\n    ),\n    refreshAnimationType: kvLookup(\n      'refreshAnimationType',\n      config,\n      dataset,\n      DEFAULT_CONFIG.refreshAnimationType\n    ),\n\n    // Gauge types\n    donut: kvLookup('donut', config, dataset, DEFAULT_CONFIG.donut),\n    donutStartAngle: kvLookup('donutStartAngle', config, dataset, DEFAULT_CONFIG.donutStartAngle),\n    differential: kvLookup('differential', config, dataset, DEFAULT_CONFIG.differential),\n    relativeGaugeSize: kvLookup(\n      'relativeGaugeSize',\n      config,\n      dataset,\n      DEFAULT_CONFIG.relativeGaugeSize\n    ),\n\n    // Advanced features\n    customSectors: kvLookup('customSectors', config, dataset, DEFAULT_CONFIG.customSectors),\n    pointer: kvLookup('pointer', config, dataset, DEFAULT_CONFIG.pointer),\n    pointerOptions: kvLookup('pointerOptions', config, dataset, DEFAULT_CONFIG.pointerOptions),\n    targetLine: kvLookup('targetLine', config, dataset, DEFAULT_CONFIG.targetLine, 'float'),\n    targetLineColor: kvLookup('targetLineColor', config, dataset, DEFAULT_CONFIG.targetLineColor),\n    targetLineWidth: kvLookup('targetLineWidth', config, dataset, DEFAULT_CONFIG.targetLineWidth),\n\n    // Number formatting\n    humanFriendly: kvLookup('humanFriendly', config, dataset, DEFAULT_CONFIG.humanFriendly),\n    humanFriendlyDecimal: kvLookup(\n      'humanFriendlyDecimal',\n      config,\n      dataset,\n      DEFAULT_CONFIG.humanFriendlyDecimal\n    ),\n    formatNumber: kvLookup('formatNumber', config, dataset, DEFAULT_CONFIG.formatNumber),\n    displayRemaining: kvLookup(\n      'displayRemaining',\n      config,\n      dataset,\n      DEFAULT_CONFIG.displayRemaining\n    ),\n\n    // Label\n    label: kvLookup('label', config, dataset, DEFAULT_CONFIG.label),\n\n    // Title configuration\n    title: kvLookup('title', config, dataset, DEFAULT_CONFIG.title),\n    titleFontColor: kvLookup('titleFontColor', config, dataset, DEFAULT_CONFIG.titleFontColor),\n    titleFontFamily: kvLookup('titleFontFamily', config, dataset, DEFAULT_CONFIG.titleFontFamily),\n    titleFontSize: kvLookup('titleFontSize', config, dataset, DEFAULT_CONFIG.titleFontSize),\n    titleFontWeight: kvLookup('titleFontWeight', config, dataset, DEFAULT_CONFIG.titleFontWeight),\n\n    // Value font configuration\n    valueFontSize: kvLookup('valueFontSize', config, dataset, DEFAULT_CONFIG.valueFontSize),\n    valueFontWeight: kvLookup('valueFontWeight', config, dataset, DEFAULT_CONFIG.valueFontWeight),\n\n    // Label font configuration\n    labelFontSize: kvLookup('labelFontSize', config, dataset, DEFAULT_CONFIG.labelFontSize),\n    labelFontWeight: kvLookup('labelFontWeight', config, dataset, DEFAULT_CONFIG.labelFontWeight),\n\n    // Min/Max label font configuration\n    minMaxLabelFontSize: kvLookup(\n      'minMaxLabelFontSize',\n      config,\n      dataset,\n      DEFAULT_CONFIG.minMaxLabelFontSize\n    ),\n\n    // Gauge angles\n    startAngle: kvLookup('startAngle', config, dataset, DEFAULT_CONFIG.startAngle),\n    endAngle: kvLookup('endAngle', config, dataset, DEFAULT_CONFIG.endAngle),\n\n    // Callbacks\n    textRenderer: kvLookup('textRenderer', config, dataset, DEFAULT_CONFIG.textRenderer),\n    onAnimationEnd: kvLookup('onAnimationEnd', config, dataset, DEFAULT_CONFIG.onAnimationEnd),\n  };\n\n  return validateConfig(processedConfig);\n}\n\n/**\n * Validate configuration values\n * @param {object} config - Configuration to validate\n * @returns {object} Validated configuration\n */\nfunction validateConfig(config) {\n  // Clamp value within min/max range\n  if (config.value > config.max) config.value = config.max;\n  if (config.value < config.min) config.value = config.min;\n\n  // Validate required fields\n  if (!config.id && !config.parentNode) {\n    throw new Error('JustGage: Either id or parentNode must be provided');\n  }\n\n  // Validate min/max range\n  if (config.min >= config.max) {\n    throw new Error('JustGage: min value must be less than max value');\n  }\n\n  // Ensure levelColors is a valid array\n  if (!Array.isArray(config.levelColors) || config.levelColors.length === 0) {\n    config.levelColors = DEFAULT_CONFIG.levelColors;\n  }\n\n  return config;\n}\n", "/**\n * Native SVG rendering functions\n * Replaces RaphaelJS dependency with browser-native SVG APIs\n */\n\n/**\n * SVGRenderer - Native SVG rendering class for creating gauge graphics\n *\n * @class SVGRenderer\n * @description Provides a RaphaelJS-compatible API using native browser SVG APIs.\n * Handles creation and manipulation of SVG elements for gauge rendering.\n */\nexport class SVGRenderer {\n  /**\n   * Create a new SVG renderer instance\n   *\n   * @param {HTMLElement} container - DOM element to render SVG into\n   * @param {number} width - SVG canvas width in pixels\n   * @param {number} height - SVG canvas height in pixels\n   */\n  constructor(container, width, height) {\n    this.container = container;\n    this.width = width;\n    this.height = height;\n    this.svg = null;\n    this.elements = new Map();\n    this.init();\n  }\n\n  init() {\n    // Create SVG element\n    this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    this.svg.setAttribute('width', this.width);\n    this.svg.setAttribute('height', this.height);\n    this.svg.setAttribute('viewBox', `0 0 ${this.width} ${this.height}`);\n    this.svg.style.overflow = 'hidden';\n\n    // Clear container and add SVG\n    this.container.innerHTML = '';\n    this.container.appendChild(this.svg);\n  }\n\n  /**\n   * Create a circle element\n   */\n  circle(cx, cy, radius) {\n    const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n    circle.setAttribute('cx', cx);\n    circle.setAttribute('cy', cy);\n    circle.setAttribute('r', radius);\n    this.svg.appendChild(circle);\n\n    return new SVGElement(circle);\n  }\n\n  /**\n   * Create a rectangle element\n   */\n  rect(x, y, width, height) {\n    const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n    rect.setAttribute('x', x);\n    rect.setAttribute('y', y);\n    rect.setAttribute('width', width);\n    rect.setAttribute('height', height);\n    this.svg.appendChild(rect);\n\n    return new SVGElement(rect);\n  }\n\n  /**\n   * Create a path element\n   */\n  path(pathData) {\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttribute('d', pathData);\n    this.svg.appendChild(path);\n\n    return new SVGElement(path);\n  }\n\n  /**\n   * Create a line element\n   */\n  line(x1, y1, x2, y2) {\n    const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n    line.setAttribute('x1', x1);\n    line.setAttribute('y1', y1);\n    line.setAttribute('x2', x2);\n    line.setAttribute('y2', y2);\n    this.svg.appendChild(line);\n\n    return new SVGElement(line);\n  }\n\n  /**\n   * Create a text element\n   */\n  text(x, y, content) {\n    const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    text.setAttribute('x', x);\n    text.setAttribute('y', y);\n    text.textContent = content;\n    this.svg.appendChild(text);\n\n    return new SVGElement(text);\n  }\n\n  /**\n   * Create an arc/sector path\n   */\n  sector(cx, cy, r1, r2, startAngle, endAngle) {\n    const pathData = this.createSectorPath(cx, cy, r1, r2, startAngle, endAngle);\n    return this.path(pathData);\n  }\n\n  /**\n   * Generate SVG path data for an arc sector matching original JustGage\n   */\n  createSectorPath(cx, cy, r1, r2, startAngle, endAngle) {\n    const rad1 = ((startAngle - 90) * Math.PI) / 180;\n    const rad2 = ((endAngle - 90) * Math.PI) / 180;\n\n    const x1 = cx + r1 * Math.cos(rad1);\n    const y1 = cy + r1 * Math.sin(rad1);\n    const x2 = cx + r2 * Math.cos(rad1);\n    const y2 = cy + r2 * Math.sin(rad1);\n    const x3 = cx + r2 * Math.cos(rad2);\n    const y3 = cy + r2 * Math.sin(rad2);\n    const x4 = cx + r1 * Math.cos(rad2);\n    const y4 = cy + r1 * Math.sin(rad2);\n\n    // Handle angle wrapping for large arc flag\n    let angleSpan = endAngle - startAngle;\n    if (angleSpan <= 0) {\n      angleSpan += 360;\n    }\n    const largeArcFlag = angleSpan > 180 ? 1 : 0;\n\n    return [\n      `M ${x1} ${y1}`,\n      `L ${x2} ${y2}`,\n      `A ${r2} ${r2} 0 ${largeArcFlag} 1 ${x3} ${y3}`,\n      `L ${x4} ${y4}`,\n      `A ${r1} ${r1} 0 ${largeArcFlag} 0 ${x1} ${y1}`,\n      'Z',\n    ].join(' ');\n  }\n\n  /**\n   * Create gauge path using original JustGage algorithm with exact widget parameters\n   */\n  createGaugePath(\n    value,\n    min,\n    max,\n    widgetW,\n    widgetH,\n    dx,\n    dy,\n    gaugeWidthScale,\n    donut = false,\n    isDiff = false\n  ) {\n    let alpha; // angle in radians\n    let Ro; // outer radius, from center to outer edge of gauge\n    let Ri; // inner radius, from center to inner edge of gauge\n    let Cx; // center x\n    let Cy; // center y\n    let Xo, Yo, Xi, Yi; // outer and inner arc endpoints\n    let path; // SVG path string\n\n    if (min < 0 && !isDiff) {\n      max -= min;\n      value -= min;\n      min = 0;\n    }\n\n    if (donut) {\n      alpha = (1 - (2 * (value - min)) / (max - min)) * Math.PI;\n      Ro = widgetW / 2 - widgetW / 30;\n      Ri = Ro - (widgetW / 6.666666666666667) * gaugeWidthScale;\n\n      Cx = widgetW / 2 + dx;\n      Cy = widgetH / 2 + dy;\n\n      Xo = Cx + Ro * Math.cos(alpha);\n      Yo = Cy - Ro * Math.sin(alpha);\n      Xi = Cx + Ri * Math.cos(alpha);\n      Yi = Cy - Ri * Math.sin(alpha);\n\n      path = 'M' + (Cx - Ri) + ',' + Cy + ' ';\n      path += 'L' + (Cx - Ro) + ',' + Cy + ' ';\n      if (value - min > (max - min) / 2) {\n        path += 'A' + Ro + ',' + Ro + ' 0 0 1 ' + (Cx + Ro) + ',' + Cy + ' ';\n      }\n      path += 'A' + Ro + ',' + Ro + ' 0 0 1 ' + Xo + ',' + Yo + ' ';\n      path += 'L' + Xi + ',' + Yi + ' ';\n      if (value - min > (max - min) / 2) {\n        path += 'A' + Ri + ',' + Ri + ' 0 0 0 ' + (Cx + Ri) + ',' + Cy + ' ';\n      }\n      path += 'A' + Ri + ',' + Ri + ' 0 0 0 ' + (Cx - Ri) + ',' + Cy + ' ';\n      path += 'Z ';\n    } else if (isDiff) {\n      alpha = (1 - (value - min) / (max - min)) * Math.PI;\n      Ro = widgetW / 2 - widgetW / 10;\n      Ri = Ro - (widgetW / 6.666666666666667) * gaugeWidthScale;\n\n      Cx = widgetW / 2 + dx;\n      Cy = widgetH / 1.25 + dy;\n\n      Xo = Cx + Ro * Math.cos(alpha);\n      Yo = Cy - Ro * Math.sin(alpha);\n      Xi = Cx + Ri * Math.cos(alpha);\n      Yi = Cy - Ri * Math.sin(alpha);\n\n      const middle = min + (max - min) / 2;\n      const So = value < middle ? 1 : 0; // sweep flag for outer arc\n      const Si = value < middle ? 0 : 1; // sweep flag for inner arc\n\n      path = 'M' + Cx + ',' + (Cy - Ri) + ' '; // start at bottom center\n      path += 'L' + Cx + ',' + (Cy - Ro) + ' '; // line to top center (Cx, Cy - Ro)\n      path += 'A' + Ro + ',' + Ro + ' 0 0 ' + Si + ' ' + Xo + ',' + Yo + ' '; // arc to outer edge\n      path += 'L' + Xi + ',' + Yi + ' '; // line to inner edge (Xi, Yi)\n      path += 'A' + Ri + ',' + Ri + ' 0 0 ' + So + ' ' + Cx + ',' + (Cy - Ri) + ' '; // arc to bottom center\n      path += 'Z '; // close path\n    } else {\n      // Standard gauge\n      alpha = (1 - (value - min) / (max - min)) * Math.PI;\n      Ro = widgetW / 2 - widgetW / 10;\n      Ri = Ro - (widgetW / 6.666666666666667) * gaugeWidthScale;\n\n      Cx = widgetW / 2 + dx;\n      Cy = widgetH / 1.25 + dy;\n\n      Xo = Cx + Ro * Math.cos(alpha);\n      Yo = Cy - Ro * Math.sin(alpha);\n      Xi = Cx + Ri * Math.cos(alpha);\n      Yi = Cy - Ri * Math.sin(alpha);\n\n      path = 'M' + (Cx - Ri) + ',' + Cy + ' ';\n      path += 'L' + (Cx - Ro) + ',' + Cy + ' ';\n      path += 'A' + Ro + ',' + Ro + ' 0 0 1 ' + Xo + ',' + Yo + ' ';\n      path += 'L' + Xi + ',' + Yi + ' ';\n      path += 'A' + Ri + ',' + Ri + ' 0 0 0 ' + (Cx - Ri) + ',' + Cy + ' ';\n      path += 'Z ';\n    }\n\n    return path;\n  }\n\n  /**\n   * Create gauge pointer (triangle path)\n   */\n  pointer(cx, cy, length, width, angle) {\n    const rad = ((angle - 90) * Math.PI) / 180;\n    const tipX = cx + length * Math.cos(rad);\n    const tipY = cy + length * Math.sin(rad);\n\n    const baseRad1 = rad + Math.PI / 2;\n    const baseRad2 = rad - Math.PI / 2;\n    const halfWidth = width / 2;\n\n    const base1X = cx + halfWidth * Math.cos(baseRad1);\n    const base1Y = cy + halfWidth * Math.sin(baseRad1);\n    const base2X = cx + halfWidth * Math.cos(baseRad2);\n    const base2Y = cy + halfWidth * Math.sin(baseRad2);\n\n    const pathData = `M ${tipX} ${tipY} L ${base1X} ${base1Y} L ${base2X} ${base2Y} Z`;\n    return this.path(pathData);\n  }\n\n  /**\n   * Remove all elements from SVG\n   */\n  clear() {\n    while (this.svg.firstChild) {\n      this.svg.removeChild(this.svg.firstChild);\n    }\n    this.elements.clear();\n  }\n\n  /**\n   * Remove the entire SVG from DOM\n   */\n  remove() {\n    if (this.svg && this.svg.parentNode) {\n      this.svg.parentNode.removeChild(this.svg);\n    }\n    this.elements.clear();\n  }\n}\n\n/**\n * Wrapper class for SVG elements to provide Raphael-like API\n */\nexport class SVGElement {\n  constructor(element) {\n    this.element = element;\n  }\n\n  /**\n   * Set element attributes\n   */\n  attr(attrs) {\n    if (typeof attrs === 'string') {\n      return this.element.getAttribute(attrs);\n    }\n\n    Object.keys(attrs).forEach(key => {\n      const value = attrs[key];\n\n      // Handle special attribute mappings\n      switch (key) {\n        case 'fill':\n          this.element.setAttribute('fill', value);\n          break;\n        case 'stroke':\n          this.element.setAttribute('stroke', value);\n          break;\n        case 'stroke-width':\n        case 'strokeWidth':\n          this.element.setAttribute('stroke-width', value);\n          break;\n        case 'opacity':\n          this.element.setAttribute('opacity', value);\n          break;\n        case 'font-family':\n        case 'fontFamily':\n          this.element.setAttribute('font-family', value);\n          break;\n        case 'font-size':\n        case 'fontSize':\n          this.element.setAttribute('font-size', value);\n          break;\n        case 'font-weight':\n        case 'fontWeight':\n          this.element.setAttribute('font-weight', value);\n          break;\n        case 'text-anchor':\n        case 'textAnchor':\n          this.element.setAttribute('text-anchor', value);\n          break;\n        case 'dominant-baseline':\n        case 'dominantBaseline':\n          this.element.setAttribute('dominant-baseline', value);\n          break;\n        default:\n          this.element.setAttribute(key, value);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Animate element (simplified version)\n   */\n  animate(attrs, duration = 500, easing = 'ease') {\n    const element = this.element;\n\n    // Create CSS transition\n    const transitions = [];\n    Object.keys(attrs).forEach(key => {\n      let property = key;\n      if (key === 'strokeWidth') property = 'stroke-width';\n      if (key === 'fontSize') property = 'font-size';\n      transitions.push(`${property} ${duration}ms ${easing}`);\n    });\n\n    element.style.transition = transitions.join(', ');\n\n    // Apply new attributes after a brief delay\n    setTimeout(() => {\n      this.attr(attrs);\n    }, 10);\n\n    // Clean up transition after animation\n    setTimeout(() => {\n      element.style.transition = '';\n    }, duration + 10);\n\n    return this;\n  }\n\n  /**\n   * Transform element\n   */\n  transform(transformString) {\n    this.element.setAttribute('transform', transformString);\n    return this;\n  }\n\n  /**\n   * Remove element from DOM\n   */\n  remove() {\n    if (this.element && this.element.parentNode) {\n      this.element.parentNode.removeChild(this.element);\n    }\n    return this;\n  }\n\n  /**\n   * Hide element\n   */\n  hide() {\n    this.element.style.display = 'none';\n    return this;\n  }\n\n  /**\n   * Show element\n   */\n  show() {\n    this.element.style.display = '';\n    return this;\n  }\n\n  /**\n   * Set element text content\n   */\n  text(content) {\n    if (content === undefined) {\n      return this.element.textContent;\n    }\n    this.element.textContent = content;\n    return this;\n  }\n}\n", "/**\n * Color manipulation utilities\n */\n\n/**\n * Remove # from hex color string\n * @param {string} str - Hex color string\n * @returns {string} Hex color without #\n */\nexport function cutHex(str) {\n  return str.charAt(0) === '#' ? str.substring(1, 7) : str;\n}\n\n/**\n * Validate if string is a valid hex color\n * @param {string} val - String to validate\n * @returns {boolean} True if valid hex color\n */\nexport function isHexColor(val) {\n  const regExp = /^#([0-9A-Fa-f]{3}){1,2}$/;\n  return typeof val === 'string' && regExp.test(val);\n}\n\n/**\n * Get color for a value based on color scheme and custom sectors\n * @param {number} val - Current value\n * @param {number} pct - Percentage (0-1)\n * @param {string[]} col - Color array\n * @param {boolean} noGradient - Disable gradient\n * @param {object} custSec - Custom sectors configuration\n * @returns {string} RGB color string\n */\nexport function getColor(val, pct, col, noGradient, custSec) {\n  let percentage, rval, gval, bval, lower, upper, range, rangePct, pctLower, pctUpper, color;\n  const cust = custSec && custSec.ranges && custSec.ranges.length > 0;\n  noGradient = noGradient || cust;\n\n  if (cust) {\n    if (custSec.percents === true) val = pct * 100;\n    for (let i = 0; i < custSec.ranges.length; i++) {\n      if (val >= custSec.ranges[i].lo && val <= custSec.ranges[i].hi) {\n        return custSec.ranges[i].color;\n      }\n    }\n  }\n\n  const no = col.length;\n  if (no === 1) return col[0];\n  const inc = noGradient ? 1 / no : 1 / (no - 1);\n  const colors = [];\n\n  for (let i = 0; i < col.length; i++) {\n    percentage = noGradient ? inc * (i + 1) : inc * i;\n    rval = parseInt(cutHex(col[i]).substring(0, 2), 16);\n    gval = parseInt(cutHex(col[i]).substring(2, 4), 16);\n    bval = parseInt(cutHex(col[i]).substring(4, 6), 16);\n    colors[i] = {\n      pct: percentage,\n      color: {\n        r: rval,\n        g: gval,\n        b: bval,\n      },\n    };\n  }\n\n  if (pct === 0) {\n    return `rgb(${[colors[0].color.r, colors[0].color.g, colors[0].color.b].join(',')})`;\n  }\n\n  for (let j = 0; j < colors.length; j++) {\n    if (pct <= colors[j].pct) {\n      if (noGradient) {\n        return `rgb(${[colors[j].color.r, colors[j].color.g, colors[j].color.b].join(',')})`;\n      } else {\n        lower = colors[j - 1];\n        upper = colors[j];\n        range = upper.pct - lower.pct;\n        rangePct = (pct - lower.pct) / range;\n        pctLower = 1 - rangePct;\n        pctUpper = rangePct;\n        color = {\n          r: Math.floor(lower.color.r * pctLower + upper.color.r * pctUpper),\n          g: Math.floor(lower.color.g * pctLower + upper.color.g * pctUpper),\n          b: Math.floor(lower.color.b * pctLower + upper.color.b * pctUpper),\n        };\n        return `rgb(${[color.r, color.g, color.b].join(',')})`;\n      }\n    }\n  }\n}\n", "/**\n * Number and text formatting utilities\n */\n\n/**\n * Format numbers with human-friendly suffixes (K, M, G, etc.)\n * @param {number} n - Number to format\n * @param {number} d - Decimal places\n * @returns {string} Formatted number with suffix\n */\nexport function humanFriendlyNumber(n, d) {\n  const d2 = Math.pow(10, d);\n  const s = ' KMGTPE';\n  let i = 0;\n  const c = 1000;\n\n  while ((n >= c || n <= -c) && ++i < s.length) {\n    n = n / c;\n  }\n\n  i = i >= s.length ? s.length - 1 : i;\n\n  return Math.round(n * d2) / d2 + s[i];\n}\n\n/**\n * Format numbers with comma separators\n * @param {number} x - Number to format\n * @returns {string} Formatted number with commas\n */\nexport function formatNumber(x) {\n  const parts = x.toString().split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return parts.join('.');\n}\n", "/**\n * @file JustGage - Modern ES6+ implementation of animated SVG gauges\n * @version 1.7.0\n * @author Bojan Djuricic <pindjur@gmail.com>\n * @license MIT\n */\n\nimport { createConfig } from './config.js';\nimport { SVGRenderer } from '../rendering/svg.js';\nimport { isNumber } from '../utils/helpers.js';\nimport { isHexColor, getColor } from '../utils/colors.js';\nimport { humanFriendlyNumber, formatNumber } from '../utils/formatters.js';\n\n/**\n * JustGage - Modern ES6+ implementation for creating animated SVG dashboard gauges.\n *\n * Features:\n * - Zero dependencies (native SVG APIs)\n * - ES6+ class-based architecture\n * - Full backward compatibility with v1.x\n * - Custom sectors and pointer support\n * - Responsive design\n * - Event system for interactions\n *\n * @class JustGage\n * @example\n * // Basic usage\n * const gauge = new JustGage({\n *   id: 'my-gauge',\n *   value: 75,\n *   min: 0,\n *   max: 100,\n *   title: 'Performance'\n * });\n *\n * // With custom colors\n * const colorGauge = new JustGage({\n *   id: 'color-gauge',\n *   value: 60,\n *   levelColors: ['#green', '#yellow', '#red'],\n *   customSectors: [\n *     { lo: 0, hi: 50, color: '#green' },\n *     { lo: 50, hi: 100, color: '#red' }\n *   ]\n * });\n */\nexport class JustGage {\n  /**\n   * Create a new gauge instance\n   *\n   * @param {object} config - Configuration options for the gauge\n   * @param {string} [config.id] - DOM element ID to render gauge (required if parentNode not provided)\n   * @param {HTMLElement} [config.parentNode] - DOM element to render gauge (required if id not provided)\n   * @param {number} [config.value=0] - Current gauge value\n   * @param {number} [config.min=0] - Minimum gauge value\n   * @param {number} [config.max=100] - Maximum gauge value\n   * @param {string} [config.title=''] - Gauge title text\n   * @param {string} [config.label=''] - Gauge label text\n   * @param {boolean} [config.reverse=false] - Reverse the gauge direction\n   * @param {number} [config.decimals=0] - Number of decimal places for value display\n   * @param {string|Array<string>} [config.levelColors=['#a9d70b', '#f9c802', '#ff0000']] - Colors for gauge levels\n   * @param {number} [config.startAngle=135] - Starting angle in degrees\n   * @param {number} [config.endAngle=45] - Ending angle in degrees\n   * @param {boolean} [config.pointer=false] - Show pointer instead of level fill\n   * @param {object} [config.pointerOptions={}] - Pointer configuration options\n   * @param {Array<object>} [config.customSectors=[]] - Custom color sectors\n   * @param {number} [config.width=400] - Gauge width in pixels\n   * @param {number} [config.height=320] - Gauge height in pixels\n   * @param {string} [config.gaugeColor='#edebeb'] - Background gauge color\n   * @param {number} [config.gaugeWidthScale=1.0] - Gauge width scale factor\n   * @param {boolean} [config.donut=false] - Create donut-style gauge\n   * @param {boolean} [config.counter=false] - Enable counter animation\n   * @param {string} [config.symbol=''] - Symbol to display with value\n   * @param {function} [config.textRenderer] - Custom text rendering function\n   * @param {function} [config.onAnimationEnd] - Animation end callback\n   * @throws {Error} When no configuration object is provided\n   * @throws {Error} When neither id nor parentNode is provided\n   * @throws {Error} When specified DOM element is not found\n   * @throws {Error} When min >= max\n   */\n  constructor(config) {\n    this.events = {};\n\n    // Validate required container\n    if (!config) {\n      throw new Error('JustGage: Configuration object is required');\n    }\n\n    // Get container element\n    if (config.id) {\n      this.node = document.getElementById(config.id);\n      if (!this.node) {\n        throw new Error(`JustGage: No element with id '${config.id}' found`);\n      }\n    } else if (config.parentNode) {\n      this.node = config.parentNode;\n    } else {\n      throw new Error('JustGage: Either id or parentNode must be provided');\n    }\n\n    // Get dataset attributes\n    const dataset = this.node.dataset || {};\n\n    // Create and validate configuration\n    this.config = createConfig(config, dataset);\n    this.originalValue = config.value ?? -1;\n\n    // Initialize gauge\n    this._initializeGauge();\n  }\n\n  /**\n   * Initialize the gauge rendering\n   * @private\n   */\n  _initializeGauge() {\n    // Determine dimensions like original JustGage\n    let width = this.config.width;\n    let height = this.config.height;\n\n    // If no dimensions specified, try to get from container\n    if (!width || !height) {\n      const rect = this.node.getBoundingClientRect();\n      if (!width) width = rect.width || 400;\n      if (!height) height = rect.height || 320;\n\n      // Update config with calculated dimensions\n      this.config.width = width;\n      this.config.height = height;\n    }\n\n    // Initialize SVG renderer\n    this.renderer = new SVGRenderer(this.node, width, height);\n\n    // Store references to drawn elements\n    this.canvas = {\n      gauge: null,\n      level: null,\n      title: null,\n      value: null,\n      min: null,\n      max: null,\n      pointer: null,\n    };\n\n    // Generate shadows if enabled\n    if (this.config.showInnerShadow) {\n      const defs =\n        this.renderer.svg.querySelector('defs') ||\n        this.renderer.svg.appendChild(\n          document.createElementNS('http://www.w3.org/2000/svg', 'defs')\n        );\n      this.generateShadow(this.renderer.svg, defs);\n    }\n\n    // Draw the gauge\n    this._drawGauge();\n  }\n\n  /**\n   * Draw the complete gauge\n   * @private\n   */\n  _drawGauge() {\n    const config = this.config;\n\n    // Calculate widget dimensions using original algorithm\n    const { widgetW, widgetH, dx, dy } = this._calculateGaugeGeometry();\n\n    // Draw gauge background using original path generation\n    const gaugePath = this.renderer.createGaugePath(\n      config.max,\n      config.min,\n      config.max,\n      widgetW,\n      widgetH,\n      dx,\n      dy,\n      config.gaugeWidthScale || 1.0,\n      config.donut,\n      config.differential\n    );\n\n    this.canvas.gauge = this.renderer.path(gaugePath).attr({\n      fill: config.gaugeColor,\n      stroke: 'none',\n    });\n\n    // Draw value level\n    this._drawLevel();\n\n    // Draw labels\n    this._drawLabels();\n\n    // Draw pointer if enabled\n    if (config.pointer) {\n      this._drawPointer();\n    }\n\n    // Draw target line if specified\n    if (config.targetLine !== null && config.targetLine !== undefined) {\n      this._drawTargetLine();\n    }\n  }\n\n  /**\n   * Draw the value level indicator\n   * @private\n   */\n  _drawLevel() {\n    const config = this.config;\n\n    // Use consistent geometry calculations\n    const { widgetW, widgetH, dx, dy } = this._calculateGaugeGeometry();\n\n    // Get level color\n    const color = this._getLevelColor(config.value);\n\n    // Draw level arc using original path generation\n    const levelPath = this.renderer.createGaugePath(\n      config.value,\n      config.min,\n      config.max,\n      widgetW,\n      widgetH,\n      dx,\n      dy,\n      config.gaugeWidthScale || 1.0,\n      config.donut,\n      config.differential\n    );\n\n    this.canvas.level = this.renderer.path(levelPath).attr({\n      fill: color,\n      stroke: 'none',\n    });\n  }\n\n  /**\n   * Calculate consistent gauge geometry for both arc and text positioning\n   * @private\n   */\n  _calculateGaugeGeometry() {\n    const config = this.config;\n    const w = config.width;\n    const h = config.height;\n\n    // Calculate widget dimensions and offsets like in _drawLabels\n    let widgetW, widgetH, dx, dy;\n    if (config.donut) {\n      if (w > h) {\n        widgetH = h;\n        widgetW = widgetH;\n      } else if (w < h) {\n        widgetW = w;\n        widgetH = widgetW;\n      } else {\n        widgetW = w;\n        widgetH = widgetW;\n      }\n      dx = (w - widgetW) / 2;\n      dy = (h - widgetH) / 2;\n    } else {\n      // For regular gauges, use original formula\n      if (w > h) {\n        widgetH = h;\n        widgetW = widgetH * 2;\n        if (widgetW > w) {\n          const aspect = widgetW / w;\n          widgetW = widgetW / aspect;\n          widgetH = widgetH / aspect;\n        }\n      } else if (w < h) {\n        widgetW = w;\n        widgetH = widgetW / 2;\n      } else {\n        widgetW = w;\n        widgetH = widgetW / 2;\n      }\n      dx = (w - widgetW) / 2;\n      dy = (h - widgetH) / 2;\n    }\n\n    // Calculate center point using widget positioning\n    const cx = dx + widgetW / 2;\n    const cy = config.donut ? dy + widgetH / 2 : dy + widgetH / 1.25;\n\n    // Calculate radii using widget width (not canvas width)\n    const outerRadius = config.donut ? widgetW / 2 - widgetW / 30 : widgetW / 2 - widgetW / 10;\n    const gaugeWidthScale = config.gaugeWidthScale || 1.0;\n    const innerRadius = outerRadius - (widgetW / 6.666666666666667) * gaugeWidthScale;\n\n    return { cx, cy, outerRadius, innerRadius, widgetW, widgetH, dx, dy };\n  }\n\n  /**\n   * Draw text labels\n   * @private\n   */\n  _drawLabels() {\n    const config = this.config;\n\n    // Use consistent geometry calculations\n    const { cx, cy, widgetW, widgetH, dx, dy } = this._calculateGaugeGeometry();\n\n    // Calculate proportional font sizes using original formulas, but allow config override\n    const titleFontSize = config.titleFontSize || Math.max(widgetH / 16, 10);\n    const valueFontSize = config.valueFontSize || (widgetH / 6.4 > 16 ? widgetH / 5.4 : 18);\n\n    // Title\n    if (config.title) {\n      this.canvas.title = this.renderer.text(cx, cy - widgetH / 16, config.title).attr({\n        'font-family': config.titleFontFamily,\n        'font-size': titleFontSize,\n        'font-weight': config.titleFontWeight,\n        'text-anchor': 'middle',\n        'dominant-baseline': 'central',\n        fill: config.titleFontColor,\n      });\n    }\n\n    // Value - use original positioning formula with proper offsets\n    const displayValue = this._formatValue(config.value);\n    const valueX = dx + widgetW / 2;\n    const valueY = config.donut ? cy : config.label ? dy + widgetH / 1.85 : dy + widgetH / 1.7;\n\n    this.canvas.value = this.renderer.text(valueX, valueY, displayValue).attr({\n      'font-family': config.valueFontFamily,\n      'font-size': valueFontSize,\n      'font-weight': config.valueFontWeight,\n      'text-anchor': 'middle',\n      'dominant-baseline': 'central',\n      fill: config.valueFontColor,\n    });\n\n    // Calculate label font size (used by both main label and min/max positioning)\n    const labelFontSize = config.labelFontSize || Math.max(widgetH / 16, 10);\n\n    // Main label (units like %, km/h, etc.)\n    if (config.label) {\n      const labelY = valueY + labelFontSize;\n\n      this.canvas.label = this.renderer.text(valueX, labelY, config.label).attr({\n        'font-family': config.labelFontFamily,\n        'font-size': labelFontSize,\n        'text-anchor': 'middle',\n        'dominant-baseline': 'central',\n        fill: config.labelFontColor,\n      });\n    }\n\n    // Min/Max labels\n    if (config.showMinMax && !config.hideMinMax) {\n      // Use original positioning formula with proper offsets\n      const gaugeWidthScale = config.gaugeWidthScale || 1.0;\n\n      // Use exact original positioning formula\n      // For donut: labelY = valueY + labelFontSize\n      // For regular: labelY = valueY + valueFontSize / 2 + 5\n      let minMaxLabelY;\n      if (config.donut) {\n        minMaxLabelY = valueY + labelFontSize;\n      } else {\n        // Use original formula exactly as in original JustGage\n        minMaxLabelY = valueY + valueFontSize / 2 + 5;\n      }\n\n      // Original positioning: based on widget width and scale with offsets\n      const minX = dx + widgetW / 10 + ((widgetW / 6.666666666666667) * gaugeWidthScale) / 2;\n      const maxX =\n        dx + widgetW - widgetW / 10 - ((widgetW / 6.666666666666667) * gaugeWidthScale) / 2;\n      const minY = minMaxLabelY;\n      const maxY = minMaxLabelY; // Determine min text based on configuration\n      let minText = config.min;\n      if (config.minTxt) {\n        minText = config.minTxt;\n      } else if (config.humanFriendly) {\n        minText = this._humanFriendlyNumber(config.min, config.humanFriendlyDecimal);\n      } else if (config.formatNumber) {\n        minText = this._formatNumber(config.min);\n      }\n\n      // Determine max text based on configuration\n      let maxText = config.max;\n      if (config.maxTxt) {\n        maxText = config.maxTxt;\n      } else if (config.humanFriendly) {\n        maxText = this._humanFriendlyNumber(config.max, config.humanFriendlyDecimal);\n      } else if (config.formatNumber) {\n        maxText = this._formatNumber(config.max);\n      }\n\n      // Calculate proportional min/max label font size\n      const minMaxLabelFontSize = config.minMaxLabelFontSize || Math.max(widgetH / 16, 10);\n\n      if (!config.reverse) {\n        this.canvas.min = this.renderer.text(minX, minY, minText).attr({\n          'font-family': config.labelFontFamily,\n          'font-size': minMaxLabelFontSize,\n          'text-anchor': 'middle',\n          'dominant-baseline': 'central',\n          fill: config.labelFontColor,\n        });\n\n        this.canvas.max = this.renderer.text(maxX, maxY, maxText).attr({\n          'font-family': config.labelFontFamily,\n          'font-size': minMaxLabelFontSize,\n          'text-anchor': 'middle',\n          'dominant-baseline': 'central',\n          fill: config.labelFontColor,\n        });\n      } else {\n        // Reverse positions for reversed gauge\n        this.canvas.min = this.renderer.text(maxX, maxY, minText).attr({\n          'font-family': config.labelFontFamily,\n          'font-size': minMaxLabelFontSize,\n          'text-anchor': 'middle',\n          'dominant-baseline': 'central',\n          fill: config.labelFontColor,\n        });\n\n        this.canvas.max = this.renderer.text(minX, minY, maxText).attr({\n          'font-family': config.labelFontFamily,\n          'font-size': minMaxLabelFontSize,\n          'text-anchor': 'middle',\n          'dominant-baseline': 'central',\n          fill: config.labelFontColor,\n        });\n      }\n    }\n  }\n\n  /**\n   * Draw gauge pointer\n   * @private\n   */\n  _drawPointer() {\n    const config = this.config;\n    const { cx, cy, outerRadius, widgetW } = this._calculateGaugeGeometry();\n\n    // Calculate pointer angle\n    const range = config.max - config.min;\n    const ratio = (config.value - config.min) / range;\n\n    // Handle angle wrapping (e.g., 135\u00B0 to 45\u00B0 should be a 270\u00B0 span)\n    let angleRange = config.endAngle - config.startAngle;\n    if (angleRange <= 0) {\n      angleRange += 360; // Wrap around for crossing 0\u00B0\n    }\n\n    const angle = config.startAngle + ratio * angleRange;\n\n    // Calculate pointer dimensions using widget-based formulas\n    const topLength = config.pointerOptions.toplength || (widgetW * 3.5) / 100;\n    const pointerLength = outerRadius + topLength;\n    const pointerWidth = config.pointerOptions.bottomwidth || widgetW / 100;\n\n    // Draw pointer\n    this.canvas.pointer = this.renderer.pointer(cx, cy, pointerLength, pointerWidth, angle).attr({\n      fill: config.pointerOptions.color || '#000000',\n      stroke: 'none',\n    });\n  }\n\n  /**\n   * Draw target line at specified value\n   * @private\n   */\n  _drawTargetLine() {\n    const config = this.config;\n    const { cx, cy, outerRadius, innerRadius } = this._calculateGaugeGeometry();\n\n    // Calculate angle for target value\n    const range = config.max - config.min;\n    const ratio = (config.targetLine - config.min) / range;\n\n    // Handle angle wrapping (e.g., 135\u00B0 to 45\u00B0 should be a 270\u00B0 span)\n    let angleRange = config.endAngle - config.startAngle;\n    if (angleRange <= 0) {\n      angleRange += 360; // Wrap around for crossing 0\u00B0\n    }\n\n    let targetAngle = config.startAngle + ratio * angleRange;\n\n    if (config.reverse) {\n      targetAngle = config.startAngle + (1 - ratio) * angleRange;\n    }\n\n    const targetAngleRad = ((targetAngle - 90) * Math.PI) / 180;\n\n    // Calculate line coordinates using gauge geometry\n    const lineInnerRadius = innerRadius * 0.9;\n    const lineOuterRadius = outerRadius * 1.05;\n\n    const x1 = cx + lineInnerRadius * Math.cos(targetAngleRad);\n    const y1 = cy + lineInnerRadius * Math.sin(targetAngleRad);\n    const x2 = cx + lineOuterRadius * Math.cos(targetAngleRad);\n    const y2 = cy + lineOuterRadius * Math.sin(targetAngleRad);\n\n    // Draw target line\n    this.canvas.targetLine = this.renderer.line(x1, y1, x2, y2).attr({\n      stroke: config.targetLineColor,\n      'stroke-width': config.targetLineWidth,\n      'stroke-linecap': 'round',\n    });\n  }\n\n  /**\n   * Get level color based on value\n   * @private\n   */\n  _getLevelColor(value) {\n    const config = this.config;\n    const range = config.max - config.min;\n    const ratio = (value - config.min) / range;\n\n    // Use the same getColor function as the original JustGage\n    return getColor(value, ratio, config.levelColors, config.noGradient, config.customSectors);\n  }\n\n  /**\n   * Format value for display\n   * @private\n   */\n  _formatValue(value) {\n    const config = this.config;\n    let displayVal = value;\n\n    if (config.textRenderer && typeof config.textRenderer === 'function') {\n      const renderedValue = config.textRenderer(displayVal);\n      if (renderedValue !== false) {\n        return renderedValue;\n      }\n    }\n\n    if (config.humanFriendly) {\n      displayVal =\n        this._humanFriendlyNumber(displayVal, config.humanFriendlyDecimal) + config.symbol;\n    } else if (config.formatNumber) {\n      displayVal = this._formatNumber((displayVal * 1).toFixed(config.decimals)) + config.symbol;\n    } else if (config.displayRemaining) {\n      displayVal = ((config.max - displayVal) * 1).toFixed(config.decimals) + config.symbol;\n    } else {\n      displayVal = (displayVal * 1).toFixed(config.decimals) + config.symbol;\n    }\n\n    return displayVal;\n  }\n\n  /**\n   * Convert large numbers to human friendly format (e.g. 1234567 -> 1.23M)\n   * @param {number} n - Number to format\n   * @param {number} d - Decimal places\n   * @returns {string} Human friendly number\n   * @private\n   */\n  _humanFriendlyNumber(n, d) {\n    return humanFriendlyNumber(n, d);\n  }\n\n  /**\n   * Format number with commas\n   * @param {string|number} x - Number to format\n   * @returns {string} Formatted number\n   * @private\n   */\n  _formatNumber(x) {\n    return formatNumber(x);\n  }\n\n  /**\n   * Refresh gauge with new values\n   * @param {number} val - New value\n   * @param {number} [max] - New maximum value\n   * @param {number} [min] - New minimum value\n   * @param {string} [label] - New label\n   */\n  refresh(val, max, min, label) {\n    if (!isNumber(val)) {\n      throw new Error('JustGage: refresh() requires a numeric value');\n    }\n\n    const displayVal = val;\n\n    // Update label if provided\n    if (label !== null && label !== undefined) {\n      this.config.label = label;\n      if (this.canvas.label) {\n        this.canvas.label.attr({ text: this.config.label });\n      }\n    }\n\n    // Update minimum value if provided\n    if (isNumber(min)) {\n      this.config.min = min;\n\n      // Update min text display\n      if (this.canvas.min) {\n        let minText = this.config.min;\n        if (this.config.minTxt) {\n          minText = this.config.minTxt;\n        } else if (this.config.humanFriendly) {\n          minText = this._humanFriendlyNumber(this.config.min, this.config.humanFriendlyDecimal);\n        } else if (this.config.formatNumber) {\n          minText = this._formatNumber(this.config.min);\n        }\n\n        this.canvas.min.attr({ text: minText });\n      }\n    }\n\n    // Update maximum value if provided\n    if (isNumber(max)) {\n      this.config.max = max;\n\n      // Update max text display\n      if (this.canvas.max) {\n        let maxText = this.config.max;\n        if (this.config.maxTxt) {\n          maxText = this.config.maxTxt;\n        } else if (this.config.humanFriendly) {\n          maxText = this._humanFriendlyNumber(this.config.max, this.config.humanFriendlyDecimal);\n        } else if (this.config.formatNumber) {\n          maxText = this._formatNumber(this.config.max);\n        }\n\n        this.canvas.max.attr({ text: maxText });\n      }\n    }\n\n    // Validate and clamp value bounds\n    if (val * 1 > this.config.max * 1) {\n      val = this.config.max * 1;\n    }\n    if (val * 1 < this.config.min * 1) {\n      val = this.config.min * 1;\n    }\n\n    this.config.value = val * 1;\n\n    // Get color for the new value (will be applied when level is redrawn)\n\n    // Update value display\n    if (!this.config.counter && this.canvas.value) {\n      const formattedValue = this._formatValue(displayVal);\n      this.canvas.value.attr({ text: formattedValue });\n    }\n\n    // Animation values will be calculated during redraw\n\n    // Animate level change with proper color\n    if (this.canvas.level) {\n      // For now, remove and redraw - later we can add proper animation\n      this.canvas.level.remove();\n      this._drawLevel();\n    }\n\n    // Animate pointer if enabled\n    if (this.config.pointer && this.canvas.pointer) {\n      this.canvas.pointer.remove();\n      this._drawPointer();\n    }\n\n    // Call animation end callback if provided\n    if (this.config.onAnimationEnd && typeof this.config.onAnimationEnd === 'function') {\n      setTimeout(() => {\n        this.config.onAnimationEnd.call(this);\n      }, this.config.refreshAnimationTime);\n    }\n  }\n\n  /**\n   * Update gauge appearance options\n   * @param {object|string} options - Options object or option name\n   * @param {any} [val] - Option value (if options is string)\n   */\n  update(options, val) {\n    if (typeof options === 'string') {\n      this._updateProperty(options, val);\n    } else if (options && typeof options === 'object') {\n      for (const [option, value] of Object.entries(options)) {\n        this._updateProperty(option, value);\n      }\n    }\n  }\n\n  /**\n   * Update a single property\n   * @param {string} option - Property name\n   * @param {any} val - Property value\n   * @private\n   */\n  _updateProperty(option, val) {\n    switch (option) {\n      case 'valueFontColor':\n        if (!isHexColor(val)) {\n          console.warn('JustGage: valueFontColor must be a valid hex color'); // eslint-disable-line no-console\n          return;\n        }\n        this.config.valueFontColor = val;\n        if (this.canvas.value) {\n          this.canvas.value.attr({ fill: val });\n        }\n        break;\n\n      case 'labelFontColor':\n        if (!isHexColor(val)) {\n          console.warn('JustGage: labelFontColor must be a valid hex color'); // eslint-disable-line no-console\n          return;\n        }\n        this.config.labelFontColor = val;\n        // Update all label elements\n        if (this.canvas.min) {\n          this.canvas.min.attr({ fill: val });\n        }\n        if (this.canvas.max) {\n          this.canvas.max.attr({ fill: val });\n        }\n        if (this.canvas.label) {\n          this.canvas.label.attr({ fill: val });\n        }\n        break;\n\n      case 'gaugeColor':\n        this.config.gaugeColor = val;\n        if (this.canvas.background) {\n          this.canvas.background.attr({ fill: val });\n        }\n        break;\n\n      case 'levelColors':\n        this.config.levelColors = val;\n        // Redraw level with new colors\n        if (this.canvas.level) {\n          this.canvas.level.remove();\n          this._drawLevel();\n        }\n        break;\n\n      case 'targetLine':\n        this.config.targetLine = val;\n        // Remove existing target line\n        if (this.canvas.targetLine) {\n          this.canvas.targetLine.remove();\n          this.canvas.targetLine = null;\n        }\n        // Draw new target line if value is set\n        if (val !== null && val !== undefined) {\n          this._drawTargetLine();\n        }\n        break;\n\n      case 'targetLineColor':\n        this.config.targetLineColor = val;\n        if (this.canvas.targetLine) {\n          this.canvas.targetLine.attr({ stroke: val });\n        }\n        break;\n\n      case 'targetLineWidth':\n        this.config.targetLineWidth = val;\n        if (this.canvas.targetLine) {\n          this.canvas.targetLine.attr({ 'stroke-width': val });\n        }\n        break;\n\n      case 'symbol':\n        this.config.symbol = val;\n        if (this.canvas.value) {\n          const displayValue = this._formatValue(this.config.value);\n          this.canvas.value.attr({ text: displayValue });\n        }\n        break;\n\n      case 'decimals':\n        this.config.decimals = val;\n        if (this.canvas.value) {\n          const displayValue = this._formatValue(this.config.value);\n          this.canvas.value.attr({ text: displayValue });\n        }\n        break;\n\n      default:\n        console.warn(`JustGage: \"${option}\" is not a supported update setting`); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Update visual elements\n   * @private\n   */\n  _updateVisuals() {\n    if (!this.canvas || !this.renderer) return;\n\n    // Update value level\n    if (this.canvas.level) {\n      this.canvas.level.remove();\n    }\n    this._drawLevel();\n\n    // Update value text\n    if (this.canvas.value) {\n      const displayValue = this._formatValue(this.config.value);\n      this.canvas.value.text(displayValue);\n    }\n\n    // Update pointer if enabled\n    if (this.config.pointer && this.canvas.pointer) {\n      this.canvas.pointer.remove();\n      this._drawPointer();\n    }\n  }\n\n  /**\n   * Destroy the gauge and clean up resources\n   */\n  destroy() {\n    // Clean up SVG renderer\n    if (this.renderer) {\n      this.renderer.remove();\n    }\n\n    // Clear container\n    if (this.node?.parentNode) {\n      this.node.innerHTML = '';\n    }\n\n    // Clean up event listeners\n    for (const event in this.events) {\n      delete this.events[event];\n    }\n\n    // Clear references\n    this.node = null;\n    this.config = null;\n    this.events = {};\n    this.renderer = null;\n    this.canvas = null;\n  }\n\n  /**\n   * Get current gauge value\n   * @returns {number} Current value\n   */\n  getValue() {\n    return this.config.value;\n  }\n\n  /**\n   * Get current configuration\n   * @returns {object} Current configuration\n   */\n  getConfig() {\n    return { ...this.config };\n  }\n\n  /**\n   * Add event listener\n   * @param {string} eventName - Event name\n   * @param {Function} callback - Event callback\n   */\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = [];\n    }\n    this.events[eventName].push(callback);\n  }\n\n  /**\n   * Remove event listener\n   * @param {string} eventName - Event name\n   * @param {Function} [callback] - Specific callback to remove\n   */\n  off(eventName, callback) {\n    if (!this.events[eventName]) return;\n\n    if (callback) {\n      const index = this.events[eventName].indexOf(callback);\n      if (index > -1) {\n        this.events[eventName].splice(index, 1);\n      }\n    } else {\n      this.events[eventName] = [];\n    }\n  }\n\n  /**\n   * Emit event\n   * @param {string} eventName - Event name\n   * @param {...any} args - Event arguments\n   * @private\n   */\n  _emit(eventName, ...args) {\n    if (this.events[eventName]) {\n      this.events[eventName].forEach(callback => {\n        try {\n          callback.apply(this, args);\n        } catch (error) {\n          console.error(`JustGage: Error in ${eventName} event handler:`, error); // eslint-disable-line no-console\n        }\n      });\n    }\n  }\n\n  /**\n   * Generate shadow filter for inner shadow effect\n   * @param {SVGElement} svg - SVG element\n   * @param {SVGElement} defs - Defs element for filters\n   */\n  generateShadow(svg, defs) {\n    const config = this.config;\n    const shadowId = 'inner-shadow-' + (config.id || config.classId);\n\n    // Create filter element\n    const filter = document.createElementNS('http://www.w3.org/2000/svg', 'filter');\n    filter.setAttribute('id', shadowId);\n    defs.appendChild(filter);\n\n    // Create offset for shadow\n    const feOffset = document.createElementNS('http://www.w3.org/2000/svg', 'feOffset');\n    feOffset.setAttribute('dx', 0);\n    feOffset.setAttribute('dy', config.shadowVerticalOffset);\n    filter.appendChild(feOffset);\n\n    // Create blur effect\n    const feGaussianBlur = document.createElementNS('http://www.w3.org/2000/svg', 'feGaussianBlur');\n    feGaussianBlur.setAttribute('result', 'offset-blur');\n    feGaussianBlur.setAttribute('stdDeviation', config.shadowSize);\n    filter.appendChild(feGaussianBlur);\n\n    // Create composite for inverse\n    const feComposite1 = document.createElementNS('http://www.w3.org/2000/svg', 'feComposite');\n    feComposite1.setAttribute('operator', 'out');\n    feComposite1.setAttribute('in', 'SourceGraphic');\n    feComposite1.setAttribute('in2', 'offset-blur');\n    feComposite1.setAttribute('result', 'inverse');\n    filter.appendChild(feComposite1);\n\n    // Create flood for shadow color\n    const feFlood = document.createElementNS('http://www.w3.org/2000/svg', 'feFlood');\n    feFlood.setAttribute('flood-color', 'black');\n    feFlood.setAttribute('flood-opacity', config.shadowOpacity);\n    feFlood.setAttribute('result', 'color');\n    filter.appendChild(feFlood);\n\n    // Create composite for shadow\n    const feComposite2 = document.createElementNS('http://www.w3.org/2000/svg', 'feComposite');\n    feComposite2.setAttribute('operator', 'in');\n    feComposite2.setAttribute('in', 'color');\n    feComposite2.setAttribute('in2', 'inverse');\n    feComposite2.setAttribute('result', 'shadow');\n    filter.appendChild(feComposite2);\n\n    // Create final composite\n    const feComposite3 = document.createElementNS('http://www.w3.org/2000/svg', 'feComposite');\n    feComposite3.setAttribute('operator', 'over');\n    feComposite3.setAttribute('in', 'shadow');\n    feComposite3.setAttribute('in2', 'SourceGraphic');\n    filter.appendChild(feComposite3);\n\n    // Apply shadow filter if enabled\n    if (config.showInnerShadow) {\n      // Apply to gauge background and level elements\n      if (this.canvas.background) {\n        this.canvas.background.attr({ filter: `url(#${shadowId})` });\n      }\n      if (this.canvas.level) {\n        this.canvas.level.attr({ filter: `url(#${shadowId})` });\n      }\n    }\n\n    return shadowId;\n  }\n}\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "JustGage", "VERSION", "src_default", "isUndefined", "v", "isNumber", "n", "extend", "out", "sources", "source", "key", "uuid", "c", "r", "kvLookup", "tableA", "tableB", "defVal", "dataType", "val", "canConvert", "DEFAULT_CONFIG", "createConfig", "config", "dataset", "isUndefined", "defaults", "restConfig", "extend", "processedConfig", "uuid", "kvLookup", "validateConfig", "SVGRenderer", "container", "width", "height", "cx", "cy", "radius", "circle", "SVGElement", "x", "y", "rect", "pathData", "path", "x1", "y1", "x2", "y2", "line", "content", "text", "r1", "r2", "startAngle", "endAngle", "rad1", "rad2", "x3", "y3", "x4", "y4", "angleSpan", "largeArcFlag", "value", "min", "max", "widgetW", "widgetH", "dx", "dy", "gaugeWidthScale", "donut", "isDiff", "alpha", "Ro", "Ri", "Cx", "Cy", "Xo", "Yo", "Xi", "Yi", "middle", "So", "Si", "length", "angle", "rad", "tipX", "tipY", "baseRad1", "baseRad2", "halfWidth", "base1X", "base1Y", "base2X", "base2Y", "element", "attrs", "key", "duration", "easing", "transitions", "property", "transformString", "cutHex", "str", "isHexColor", "val", "getColor", "pct", "col", "noGradient", "custSec", "percentage", "rval", "gval", "bval", "lower", "upper", "range", "rangePct", "pctLower", "pctUpper", "color", "cust", "i", "no", "inc", "colors", "j", "humanFriendlyNumber", "n", "d", "d2", "s", "i", "c", "formatNumber", "x", "parts", "JustGage", "config", "dataset", "createConfig", "width", "height", "rect", "SVGRenderer", "defs", "widgetW", "widgetH", "dx", "dy", "gaugePath", "color", "levelPath", "w", "h", "aspect", "cx", "cy", "outerRadius", "gaugeWidthScale", "innerRadius", "titleFontSize", "valueFontSize", "displayValue", "valueX", "valueY", "labelFontSize", "labelY", "minMaxLabelY", "minX", "maxX", "minY", "maxY", "minText", "maxText", "minMaxLabelFontSize", "range", "ratio", "angleRange", "angle", "topLength", "pointerLength", "pointerWidth", "targetAngle", "targetAngleRad", "lineInnerRadius", "lineOuterRadius", "x1", "y1", "x2", "y2", "value", "getColor", "displayVal", "renderedValue", "n", "d", "humanFriendlyNumber", "x", "formatNumber", "val", "max", "min", "label", "isNumber", "formattedValue", "options", "option", "isHexColor", "event", "eventName", "callback", "index", "args", "error", "svg", "shadowId", "filter", "feOffset", "feGaussianBlur", "feComposite1", "feFlood", "feComposite2", "feComposite3", "src_default", "JustGage", "VERSION"]
}
