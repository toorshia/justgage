{
  "version": 3,
  "sources": ["../src/index.js", "../src/utils/helpers.js", "../src/core/config.js", "../src/rendering/svg.js", "../src/utils/colors.js", "../src/utils/formatters.js", "../src/core/JustGage.js"],
  "sourcesContent": ["/**\n * JustGage - Modern SVG Gauges\n * Entry point for the library\n *\n * @version 2.0.0\n * @author Bojan Djuricic (@Toorshia)\n * @license MIT\n */\n\nimport { JustGage } from './core/JustGage.js';\n\n// Export the main class\nexport { JustGage };\n\n// Default export for easier importing\nexport default JustGage;\n\n// Version info\nexport const VERSION = '2.0.0';\n\n// For backward compatibility in browser environments\nif (typeof window !== 'undefined') {\n  window.JustGage = JustGage;\n}\n", "/**\n * General utility functions for JustGage\n */\n\n/**\n * Check if a value is undefined or null\n * @param {any} v - Value to check\n * @returns {boolean} True if undefined or null\n */\nexport function isUndefined(v) {\n  return v === null || v === undefined;\n}\n\n/**\n * Check if a value is a valid number\n * @param {any} n - Value to check\n * @returns {boolean} True if valid number\n */\nexport function isNumber(n) {\n  return n !== null && n !== undefined && !isNaN(n);\n}\n\n/**\n * Extend target object with properties from source objects\n * @param {object} out - Target object\n * @param {...object} sources - Source objects\n * @returns {object} Extended object\n */\nexport function extend(out, ...sources) {\n  out = out || {};\n\n  for (const source of sources) {\n    if (!source) {\n      continue;\n    }\n\n    for (const key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        out[key] = source[key];\n      }\n    }\n  }\n\n  return out;\n}\n\n/**\n * Generate a UUID v4\n * @returns {string} UUID string\n */\nexport function uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Lookup value from multiple hash tables with fallback\n * @param {string} key - Key to lookup\n * @param {object} tableA - First table\n * @param {object} tableB - Second table (e.g., dataset)\n * @param {any} defVal - Default value\n * @param {string} dataType - Data type conversion ('int', 'float')\n * @returns {any} Found value or default\n */\nexport function kvLookup(key, tableA, tableB, defVal, dataType) {\n  let val = defVal;\n  let canConvert = false;\n\n  if (!isUndefined(key)) {\n    if (!isUndefined(tableB) && typeof tableB === 'object' && key in tableB) {\n      val = tableB[key];\n      canConvert = true;\n    } else if (!isUndefined(tableA) && typeof tableA === 'object' && key in tableA) {\n      val = tableA[key];\n      canConvert = true;\n    } else {\n      val = defVal;\n    }\n\n    if (canConvert && !isUndefined(dataType)) {\n      switch (dataType) {\n        case 'int':\n          val = parseInt(val, 10);\n          break;\n        case 'float':\n          val = parseFloat(val);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  return val;\n}\n\n/**\n * Clamp a value between min and max\n * @param {number} value - Value to clamp\n * @param {number} min - Minimum value\n * @param {number} max - Maximum value\n * @returns {number} Clamped value\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Create a simple event emitter\n * @returns {object} Event emitter with on, off, and emit methods\n */\nexport function createEventEmitter() {\n  const events = {};\n\n  return {\n    on(event, callback) {\n      if (!events[event]) {\n        events[event] = [];\n      }\n      events[event].push(callback);\n    },\n\n    off(event, callback) {\n      if (!events[event]) return;\n\n      if (callback) {\n        const index = events[event].indexOf(callback);\n        if (index > -1) {\n          events[event].splice(index, 1);\n        }\n      } else {\n        events[event] = [];\n      }\n    },\n\n    emit(event, ...args) {\n      if (!events[event]) return;\n      events[event].forEach(callback => callback(...args));\n    },\n  };\n}\n", "/**\n * Configuration management for JustGage\n */\n\nimport { kvLookup, uuid, extend, isUndefined } from '../utils/helpers.js';\n\n/**\n * Default configuration values\n */\nexport const DEFAULT_CONFIG = {\n  value: 0,\n  min: 0,\n  max: 100,\n  reverse: false,\n  gaugeWidthScale: 1.0,\n  gaugeColor: '#edebeb',\n  label: '',\n  valueFontColor: '#010101',\n  valueFontFamily: 'Arial',\n  labelFontColor: '#b3b3b3',\n  labelFontFamily: 'Arial',\n  symbol: '',\n  shadowOpacity: 0.2,\n  shadowSize: 5,\n  shadowVerticalOffset: 3,\n  levelColors: ['#a9d70b', '#f9c802', '#ff0000'],\n  startAnimationTime: 700,\n  startAnimationType: '>',\n  refreshAnimationTime: 700,\n  refreshAnimationType: '>',\n  donutStartAngle: 90,\n  valueMinFontSize: 16,\n  labelMinFontSize: 10,\n  minLabelMinFontSize: 10,\n  maxLabelMinFontSize: 10,\n  hideValue: false,\n  hideMinMax: false,\n  showMinMax: true,\n  showInnerShadow: false,\n  humanFriendly: false,\n  humanFriendlyDecimal: 0,\n  noGradient: false,\n  donut: false,\n  differential: false,\n  relativeGaugeSize: false,\n  counter: false,\n  decimals: 0,\n  customSectors: {},\n  formatNumber: false,\n  pointer: false,\n  pointerOptions: {},\n  displayRemaining: false,\n  targetLine: null,\n  targetLineColor: '#000000',\n  targetLineWidth: 1.5,\n  textRenderer: null,\n  onAnimationEnd: null,\n  minTxt: false,\n  maxTxt: false,\n  defaults: false,\n  parentNode: null,\n  width: 400,\n  height: 320,\n  startAngle: 135,\n  endAngle: 405,\n  title: '',\n  titleFontColor: '#999999',\n  titleFontFamily: 'Arial',\n  titleFontSize: null, // Will use dynamic calculation if not specified\n  titleFontWeight: 'normal',\n  valueFontSize: null, // Will use dynamic calculation if not specified\n  valueFontWeight: 'normal',\n  labelFontSize: null, // Will use dynamic calculation if not specified\n  labelFontWeight: 'normal',\n  minMaxLabelFontSize: null, // Will use dynamic calculation if not specified\n};\n\n/**\n * Create and validate configuration object\n * @param {object} config - User configuration\n * @param {object} dataset - Dataset from DOM element\n * @returns {object} Processed configuration\n */\nexport function createConfig(config, dataset = {}) {\n  if (isUndefined(config)) {\n    throw new Error('JustGage: Configuration object is required');\n  }\n\n  const { defaults, ...restConfig } = config;\n  if (defaults) {\n    config = extend({}, defaults, restConfig);\n  }\n\n  const processedConfig = {\n    // Generate unique class ID for styling\n    classId: uuid(),\n\n    // Core identification\n    id: config.id,\n    parentNode: kvLookup('parentNode', config, dataset, null),\n\n    // Dimensions\n    width: kvLookup('width', config, dataset, DEFAULT_CONFIG.width),\n    height: kvLookup('height', config, dataset, DEFAULT_CONFIG.height),\n\n    // Value settings\n    value: kvLookup('value', config, dataset, DEFAULT_CONFIG.value, 'float'),\n    min: kvLookup('min', config, dataset, DEFAULT_CONFIG.min, 'float'),\n    max: kvLookup('max', config, dataset, DEFAULT_CONFIG.max, 'float'),\n    minTxt: kvLookup('minTxt', config, dataset, DEFAULT_CONFIG.minTxt),\n    maxTxt: kvLookup('maxTxt', config, dataset, DEFAULT_CONFIG.maxTxt),\n    reverse: kvLookup('reverse', config, dataset, DEFAULT_CONFIG.reverse),\n\n    // Display settings\n    symbol: kvLookup('symbol', config, dataset, DEFAULT_CONFIG.symbol),\n    decimals: kvLookup('decimals', config, dataset, DEFAULT_CONFIG.decimals),\n    counter: kvLookup('counter', config, dataset, DEFAULT_CONFIG.counter),\n    hideValue: kvLookup('hideValue', config, dataset, DEFAULT_CONFIG.hideValue),\n    hideMinMax: kvLookup('hideMinMax', config, dataset, DEFAULT_CONFIG.hideMinMax),\n    showMinMax: kvLookup('showMinMax', config, dataset, DEFAULT_CONFIG.showMinMax),\n\n    // Fonts and colors\n    valueFontColor: kvLookup('valueFontColor', config, dataset, DEFAULT_CONFIG.valueFontColor),\n    valueFontFamily: kvLookup('valueFontFamily', config, dataset, DEFAULT_CONFIG.valueFontFamily),\n    labelFontColor: kvLookup('labelFontColor', config, dataset, DEFAULT_CONFIG.labelFontColor),\n    labelFontFamily: kvLookup('labelFontFamily', config, dataset, DEFAULT_CONFIG.labelFontFamily),\n\n    // Font sizes\n    valueMinFontSize: kvLookup(\n      'valueMinFontSize',\n      config,\n      dataset,\n      DEFAULT_CONFIG.valueMinFontSize\n    ),\n    labelMinFontSize: kvLookup(\n      'labelMinFontSize',\n      config,\n      dataset,\n      DEFAULT_CONFIG.labelMinFontSize\n    ),\n    minLabelMinFontSize: kvLookup(\n      'minLabelMinFontSize',\n      config,\n      dataset,\n      DEFAULT_CONFIG.minLabelMinFontSize\n    ),\n    maxLabelMinFontSize: kvLookup(\n      'maxLabelMinFontSize',\n      config,\n      dataset,\n      DEFAULT_CONFIG.maxLabelMinFontSize\n    ),\n\n    // Gauge appearance\n    gaugeWidthScale: kvLookup('gaugeWidthScale', config, dataset, DEFAULT_CONFIG.gaugeWidthScale),\n    gaugeColor: kvLookup('gaugeColor', config, dataset, DEFAULT_CONFIG.gaugeColor),\n    levelColors: kvLookup('levelColors', config, dataset, DEFAULT_CONFIG.levelColors),\n    noGradient: kvLookup('noGradient', config, dataset, DEFAULT_CONFIG.noGradient),\n\n    // Shadow settings\n    shadowOpacity: kvLookup('shadowOpacity', config, dataset, DEFAULT_CONFIG.shadowOpacity),\n    shadowSize: kvLookup('shadowSize', config, dataset, DEFAULT_CONFIG.shadowSize),\n    shadowVerticalOffset: kvLookup(\n      'shadowVerticalOffset',\n      config,\n      dataset,\n      DEFAULT_CONFIG.shadowVerticalOffset\n    ),\n    showInnerShadow: kvLookup('showInnerShadow', config, dataset, DEFAULT_CONFIG.showInnerShadow),\n\n    // Animation settings\n    startAnimationTime: kvLookup(\n      'startAnimationTime',\n      config,\n      dataset,\n      DEFAULT_CONFIG.startAnimationTime\n    ),\n    startAnimationType: kvLookup(\n      'startAnimationType',\n      config,\n      dataset,\n      DEFAULT_CONFIG.startAnimationType\n    ),\n    refreshAnimationTime: kvLookup(\n      'refreshAnimationTime',\n      config,\n      dataset,\n      DEFAULT_CONFIG.refreshAnimationTime\n    ),\n    refreshAnimationType: kvLookup(\n      'refreshAnimationType',\n      config,\n      dataset,\n      DEFAULT_CONFIG.refreshAnimationType\n    ),\n\n    // Gauge types\n    donut: kvLookup('donut', config, dataset, DEFAULT_CONFIG.donut),\n    donutStartAngle: kvLookup('donutStartAngle', config, dataset, DEFAULT_CONFIG.donutStartAngle),\n    differential: kvLookup('differential', config, dataset, DEFAULT_CONFIG.differential),\n    relativeGaugeSize: kvLookup(\n      'relativeGaugeSize',\n      config,\n      dataset,\n      DEFAULT_CONFIG.relativeGaugeSize\n    ),\n\n    // Advanced features\n    customSectors: kvLookup('customSectors', config, dataset, DEFAULT_CONFIG.customSectors),\n    pointer: kvLookup('pointer', config, dataset, DEFAULT_CONFIG.pointer),\n    pointerOptions: kvLookup('pointerOptions', config, dataset, DEFAULT_CONFIG.pointerOptions),\n    targetLine: kvLookup('targetLine', config, dataset, DEFAULT_CONFIG.targetLine, 'float'),\n    targetLineColor: kvLookup('targetLineColor', config, dataset, DEFAULT_CONFIG.targetLineColor),\n    targetLineWidth: kvLookup('targetLineWidth', config, dataset, DEFAULT_CONFIG.targetLineWidth),\n\n    // Number formatting\n    humanFriendly: kvLookup('humanFriendly', config, dataset, DEFAULT_CONFIG.humanFriendly),\n    humanFriendlyDecimal: kvLookup(\n      'humanFriendlyDecimal',\n      config,\n      dataset,\n      DEFAULT_CONFIG.humanFriendlyDecimal\n    ),\n    formatNumber: kvLookup('formatNumber', config, dataset, DEFAULT_CONFIG.formatNumber),\n    displayRemaining: kvLookup(\n      'displayRemaining',\n      config,\n      dataset,\n      DEFAULT_CONFIG.displayRemaining\n    ),\n\n    // Label\n    label: kvLookup('label', config, dataset, DEFAULT_CONFIG.label),\n\n    // Title configuration\n    title: kvLookup('title', config, dataset, DEFAULT_CONFIG.title),\n    titleFontColor: kvLookup('titleFontColor', config, dataset, DEFAULT_CONFIG.titleFontColor),\n    titleFontFamily: kvLookup('titleFontFamily', config, dataset, DEFAULT_CONFIG.titleFontFamily),\n    titleFontSize: kvLookup('titleFontSize', config, dataset, DEFAULT_CONFIG.titleFontSize),\n    titleFontWeight: kvLookup('titleFontWeight', config, dataset, DEFAULT_CONFIG.titleFontWeight),\n\n    // Value font configuration\n    valueFontSize: kvLookup('valueFontSize', config, dataset, DEFAULT_CONFIG.valueFontSize),\n    valueFontWeight: kvLookup('valueFontWeight', config, dataset, DEFAULT_CONFIG.valueFontWeight),\n\n    // Label font configuration\n    labelFontSize: kvLookup('labelFontSize', config, dataset, DEFAULT_CONFIG.labelFontSize),\n    labelFontWeight: kvLookup('labelFontWeight', config, dataset, DEFAULT_CONFIG.labelFontWeight),\n\n    // Min/Max label font configuration\n    minMaxLabelFontSize: kvLookup(\n      'minMaxLabelFontSize',\n      config,\n      dataset,\n      DEFAULT_CONFIG.minMaxLabelFontSize\n    ),\n\n    // Gauge angles\n    startAngle: kvLookup('startAngle', config, dataset, DEFAULT_CONFIG.startAngle),\n    endAngle: kvLookup('endAngle', config, dataset, DEFAULT_CONFIG.endAngle),\n\n    // Callbacks\n    textRenderer: kvLookup('textRenderer', config, dataset, DEFAULT_CONFIG.textRenderer),\n    onAnimationEnd: kvLookup('onAnimationEnd', config, dataset, DEFAULT_CONFIG.onAnimationEnd),\n  };\n\n  return validateConfig(processedConfig);\n}\n\n/**\n * Validate configuration values\n * @param {object} config - Configuration to validate\n * @returns {object} Validated configuration\n */\nfunction validateConfig(config) {\n  // Clamp value within min/max range\n  if (config.value > config.max) config.value = config.max;\n  if (config.value < config.min) config.value = config.min;\n\n  // Validate required fields\n  if (!config.id && !config.parentNode) {\n    throw new Error('JustGage: Either id or parentNode must be provided');\n  }\n\n  // Validate min/max range\n  if (config.min >= config.max) {\n    throw new Error('JustGage: min value must be less than max value');\n  }\n\n  // Ensure levelColors is a valid array\n  if (!Array.isArray(config.levelColors) || config.levelColors.length === 0) {\n    config.levelColors = DEFAULT_CONFIG.levelColors;\n  }\n\n  return config;\n}\n", "/**\n * Native SVG rendering functions\n * Replaces RaphaelJS dependency with browser-native SVG APIs\n */\n\n/**\n * SVGRenderer - Native SVG rendering class for creating gauge graphics\n *\n * @class SVGRenderer\n * @description Provides a RaphaelJS-compatible API using native browser SVG APIs.\n * Handles creation and manipulation of SVG elements for gauge rendering.\n */\nexport class SVGRenderer {\n  /**\n   * Create a new SVG renderer instance\n   *\n   * @param {HTMLElement} container - DOM element to render SVG into\n   * @param {number} width - SVG canvas width in pixels\n   * @param {number} height - SVG canvas height in pixels\n   */\n  constructor(container, width, height) {\n    this.container = container;\n    this.width = width;\n    this.height = height;\n    this.svg = null;\n    this.elements = new Map();\n    this.init();\n  }\n\n  init() {\n    // Create SVG element\n    this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    this.svg.setAttribute('width', this.width);\n    this.svg.setAttribute('height', this.height);\n    this.svg.setAttribute('viewBox', `0 0 ${this.width} ${this.height}`);\n    this.svg.style.overflow = 'hidden';\n\n    // Clear container and add SVG\n    this.container.innerHTML = '';\n    this.container.appendChild(this.svg);\n  }\n\n  /**\n   * Create a circle element\n   */\n  circle(cx, cy, radius) {\n    const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n    circle.setAttribute('cx', cx);\n    circle.setAttribute('cy', cy);\n    circle.setAttribute('r', radius);\n    this.svg.appendChild(circle);\n\n    return new SVGElement(circle);\n  }\n\n  /**\n   * Create a rectangle element\n   */\n  rect(x, y, width, height) {\n    const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n    rect.setAttribute('x', x);\n    rect.setAttribute('y', y);\n    rect.setAttribute('width', width);\n    rect.setAttribute('height', height);\n    this.svg.appendChild(rect);\n\n    return new SVGElement(rect);\n  }\n\n  /**\n   * Create a path element\n   */\n  path(pathData) {\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    path.setAttribute('d', pathData);\n    this.svg.appendChild(path);\n\n    return new SVGElement(path);\n  }\n\n  /**\n   * Create a line element\n   */\n  line(x1, y1, x2, y2) {\n    const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n    line.setAttribute('x1', x1);\n    line.setAttribute('y1', y1);\n    line.setAttribute('x2', x2);\n    line.setAttribute('y2', y2);\n    this.svg.appendChild(line);\n\n    return new SVGElement(line);\n  }\n\n  /**\n   * Create a text element\n   */\n  text(x, y, content) {\n    const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    text.setAttribute('x', x);\n    text.setAttribute('y', y);\n    text.textContent = content;\n    this.svg.appendChild(text);\n\n    return new SVGElement(text);\n  }\n\n  /**\n   * Create an arc/sector path\n   */\n  sector(cx, cy, r1, r2, startAngle, endAngle) {\n    const pathData = this.createSectorPath(cx, cy, r1, r2, startAngle, endAngle);\n    return this.path(pathData);\n  }\n\n  /**\n   * Generate SVG path data for an arc sector matching original JustGage\n   */\n  createSectorPath(cx, cy, r1, r2, startAngle, endAngle) {\n    const rad1 = ((startAngle - 90) * Math.PI) / 180;\n    const rad2 = ((endAngle - 90) * Math.PI) / 180;\n\n    const x1 = cx + r1 * Math.cos(rad1);\n    const y1 = cy + r1 * Math.sin(rad1);\n    const x2 = cx + r2 * Math.cos(rad1);\n    const y2 = cy + r2 * Math.sin(rad1);\n    const x3 = cx + r2 * Math.cos(rad2);\n    const y3 = cy + r2 * Math.sin(rad2);\n    const x4 = cx + r1 * Math.cos(rad2);\n    const y4 = cy + r1 * Math.sin(rad2);\n\n    // Handle angle wrapping for large arc flag\n    let angleSpan = endAngle - startAngle;\n    if (angleSpan <= 0) {\n      angleSpan += 360;\n    }\n    const largeArcFlag = angleSpan > 180 ? 1 : 0;\n\n    return [\n      `M ${x1} ${y1}`,\n      `L ${x2} ${y2}`,\n      `A ${r2} ${r2} 0 ${largeArcFlag} 1 ${x3} ${y3}`,\n      `L ${x4} ${y4}`,\n      `A ${r1} ${r1} 0 ${largeArcFlag} 0 ${x1} ${y1}`,\n      'Z',\n    ].join(' ');\n  }\n\n  /**\n   * Create gauge path using original JustGage algorithm with exact widget parameters\n   */\n  createGaugePath(\n    value,\n    min,\n    max,\n    widgetW,\n    widgetH,\n    dx,\n    dy,\n    gaugeWidthScale,\n    donut = false,\n    isDiff = false\n  ) {\n    let alpha; // angle in radians\n    let Ro; // outer radius, from center to outer edge of gauge\n    let Ri; // inner radius, from center to inner edge of gauge\n    let Cx; // center x\n    let Cy; // center y\n    let Xo, Yo, Xi, Yi; // outer and inner arc endpoints\n    let path; // SVG path string\n\n    if (min < 0 && !isDiff) {\n      max -= min;\n      value -= min;\n      min = 0;\n    }\n\n    if (donut) {\n      alpha = (1 - (2 * (value - min)) / (max - min)) * Math.PI;\n      Ro = widgetW / 2 - widgetW / 30;\n      Ri = Ro - (widgetW / 6.666666666666667) * gaugeWidthScale;\n\n      Cx = widgetW / 2 + dx;\n      Cy = widgetH / 2 + dy;\n\n      Xo = Cx + Ro * Math.cos(alpha);\n      Yo = Cy - Ro * Math.sin(alpha);\n      Xi = Cx + Ri * Math.cos(alpha);\n      Yi = Cy - Ri * Math.sin(alpha);\n\n      path = 'M' + (Cx - Ri) + ',' + Cy + ' ';\n      path += 'L' + (Cx - Ro) + ',' + Cy + ' ';\n      if (value - min > (max - min) / 2) {\n        path += 'A' + Ro + ',' + Ro + ' 0 0 1 ' + (Cx + Ro) + ',' + Cy + ' ';\n      }\n      path += 'A' + Ro + ',' + Ro + ' 0 0 1 ' + Xo + ',' + Yo + ' ';\n      path += 'L' + Xi + ',' + Yi + ' ';\n      if (value - min > (max - min) / 2) {\n        path += 'A' + Ri + ',' + Ri + ' 0 0 0 ' + (Cx + Ri) + ',' + Cy + ' ';\n      }\n      path += 'A' + Ri + ',' + Ri + ' 0 0 0 ' + (Cx - Ri) + ',' + Cy + ' ';\n      path += 'Z ';\n    } else if (isDiff) {\n      alpha = (1 - (value - min) / (max - min)) * Math.PI;\n      Ro = widgetW / 2 - widgetW / 10;\n      Ri = Ro - (widgetW / 6.666666666666667) * gaugeWidthScale;\n\n      Cx = widgetW / 2 + dx;\n      Cy = widgetH / 1.25 + dy;\n\n      Xo = Cx + Ro * Math.cos(alpha);\n      Yo = Cy - Ro * Math.sin(alpha);\n      Xi = Cx + Ri * Math.cos(alpha);\n      Yi = Cy - Ri * Math.sin(alpha);\n\n      const middle = min + (max - min) / 2;\n      const So = value < middle ? 1 : 0; // sweep flag for outer arc\n      const Si = value < middle ? 0 : 1; // sweep flag for inner arc\n\n      path = 'M' + Cx + ',' + (Cy - Ri) + ' '; // start at bottom center\n      path += 'L' + Cx + ',' + (Cy - Ro) + ' '; // line to top center (Cx, Cy - Ro)\n      path += 'A' + Ro + ',' + Ro + ' 0 0 ' + Si + ' ' + Xo + ',' + Yo + ' '; // arc to outer edge\n      path += 'L' + Xi + ',' + Yi + ' '; // line to inner edge (Xi, Yi)\n      path += 'A' + Ri + ',' + Ri + ' 0 0 ' + So + ' ' + Cx + ',' + (Cy - Ri) + ' '; // arc to bottom center\n      path += 'Z '; // close path\n    } else {\n      // Standard gauge\n      alpha = (1 - (value - min) / (max - min)) * Math.PI;\n      Ro = widgetW / 2 - widgetW / 10;\n      Ri = Ro - (widgetW / 6.666666666666667) * gaugeWidthScale;\n\n      Cx = widgetW / 2 + dx;\n      Cy = widgetH / 1.25 + dy;\n\n      Xo = Cx + Ro * Math.cos(alpha);\n      Yo = Cy - Ro * Math.sin(alpha);\n      Xi = Cx + Ri * Math.cos(alpha);\n      Yi = Cy - Ri * Math.sin(alpha);\n\n      path = 'M' + (Cx - Ri) + ',' + Cy + ' ';\n      path += 'L' + (Cx - Ro) + ',' + Cy + ' ';\n      path += 'A' + Ro + ',' + Ro + ' 0 0 1 ' + Xo + ',' + Yo + ' ';\n      path += 'L' + Xi + ',' + Yi + ' ';\n      path += 'A' + Ri + ',' + Ri + ' 0 0 0 ' + (Cx - Ri) + ',' + Cy + ' ';\n      path += 'Z ';\n    }\n\n    return path;\n  }\n\n  /**\n   * Create gauge pointer (triangle path)\n   */\n  pointer(cx, cy, length, width, angle) {\n    const rad = ((angle - 90) * Math.PI) / 180;\n    const tipX = cx + length * Math.cos(rad);\n    const tipY = cy + length * Math.sin(rad);\n\n    const baseRad1 = rad + Math.PI / 2;\n    const baseRad2 = rad - Math.PI / 2;\n    const halfWidth = width / 2;\n\n    const base1X = cx + halfWidth * Math.cos(baseRad1);\n    const base1Y = cy + halfWidth * Math.sin(baseRad1);\n    const base2X = cx + halfWidth * Math.cos(baseRad2);\n    const base2Y = cy + halfWidth * Math.sin(baseRad2);\n\n    const pathData = `M ${tipX} ${tipY} L ${base1X} ${base1Y} L ${base2X} ${base2Y} Z`;\n    return this.path(pathData);\n  }\n\n  /**\n   * Remove all elements from SVG\n   */\n  clear() {\n    while (this.svg.firstChild) {\n      this.svg.removeChild(this.svg.firstChild);\n    }\n    this.elements.clear();\n  }\n\n  /**\n   * Remove the entire SVG from DOM\n   */\n  remove() {\n    if (this.svg && this.svg.parentNode) {\n      this.svg.parentNode.removeChild(this.svg);\n    }\n    this.elements.clear();\n  }\n}\n\n/**\n * Wrapper class for SVG elements to provide Raphael-like API\n */\nexport class SVGElement {\n  constructor(element) {\n    this.element = element;\n  }\n\n  /**\n   * Set element attributes\n   */\n  attr(attrs) {\n    if (typeof attrs === 'string') {\n      return this.element.getAttribute(attrs);\n    }\n\n    Object.keys(attrs).forEach(key => {\n      const value = attrs[key];\n\n      // Handle special attribute mappings\n      switch (key) {\n        case 'fill':\n          this.element.setAttribute('fill', value);\n          break;\n        case 'stroke':\n          this.element.setAttribute('stroke', value);\n          break;\n        case 'stroke-width':\n        case 'strokeWidth':\n          this.element.setAttribute('stroke-width', value);\n          break;\n        case 'opacity':\n          this.element.setAttribute('opacity', value);\n          break;\n        case 'font-family':\n        case 'fontFamily':\n          this.element.setAttribute('font-family', value);\n          break;\n        case 'font-size':\n        case 'fontSize':\n          this.element.setAttribute('font-size', value);\n          break;\n        case 'font-weight':\n        case 'fontWeight':\n          this.element.setAttribute('font-weight', value);\n          break;\n        case 'text-anchor':\n        case 'textAnchor':\n          this.element.setAttribute('text-anchor', value);\n          break;\n        case 'dominant-baseline':\n        case 'dominantBaseline':\n          this.element.setAttribute('dominant-baseline', value);\n          break;\n        default:\n          this.element.setAttribute(key, value);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Animate element (simplified version)\n   */\n  animate(attrs, duration = 500, easing = 'ease') {\n    const element = this.element;\n\n    // Create CSS transition\n    const transitions = [];\n    Object.keys(attrs).forEach(key => {\n      let property = key;\n      if (key === 'strokeWidth') property = 'stroke-width';\n      if (key === 'fontSize') property = 'font-size';\n      transitions.push(`${property} ${duration}ms ${easing}`);\n    });\n\n    element.style.transition = transitions.join(', ');\n\n    // Apply new attributes after a brief delay\n    setTimeout(() => {\n      this.attr(attrs);\n    }, 10);\n\n    // Clean up transition after animation\n    setTimeout(() => {\n      element.style.transition = '';\n    }, duration + 10);\n\n    return this;\n  }\n\n  /**\n   * Transform element\n   */\n  transform(transformString) {\n    this.element.setAttribute('transform', transformString);\n    return this;\n  }\n\n  /**\n   * Remove element from DOM\n   */\n  remove() {\n    if (this.element && this.element.parentNode) {\n      this.element.parentNode.removeChild(this.element);\n    }\n    return this;\n  }\n\n  /**\n   * Hide element\n   */\n  hide() {\n    this.element.style.display = 'none';\n    return this;\n  }\n\n  /**\n   * Show element\n   */\n  show() {\n    this.element.style.display = '';\n    return this;\n  }\n\n  /**\n   * Set element text content\n   */\n  text(content) {\n    if (content === undefined) {\n      return this.element.textContent;\n    }\n    this.element.textContent = content;\n    return this;\n  }\n}\n", "/**\n * Color manipulation utilities\n */\n\n/**\n * Remove # from hex color string\n * @param {string} str - Hex color string\n * @returns {string} Hex color without #\n */\nexport function cutHex(str) {\n  return str.charAt(0) === '#' ? str.substring(1, 7) : str;\n}\n\n/**\n * Validate if string is a valid hex color\n * @param {string} val - String to validate\n * @returns {boolean} True if valid hex color\n */\nexport function isHexColor(val) {\n  const regExp = /^#([0-9A-Fa-f]{3}){1,2}$/;\n  return typeof val === 'string' && regExp.test(val);\n}\n\n/**\n * Get color for a value based on color scheme and custom sectors\n * @param {number} val - Current value\n * @param {number} pct - Percentage (0-1)\n * @param {string[]} col - Color array\n * @param {boolean} noGradient - Disable gradient\n * @param {object} custSec - Custom sectors configuration\n * @returns {string} RGB color string\n */\nexport function getColor(val, pct, col, noGradient, custSec) {\n  let percentage, rval, gval, bval, lower, upper, range, rangePct, pctLower, pctUpper, color;\n  const cust = custSec && custSec.ranges && custSec.ranges.length > 0;\n  noGradient = noGradient || cust;\n\n  if (cust) {\n    if (custSec.percents === true) val = pct * 100;\n    for (let i = 0; i < custSec.ranges.length; i++) {\n      if (val >= custSec.ranges[i].lo && val <= custSec.ranges[i].hi) {\n        return custSec.ranges[i].color;\n      }\n    }\n  }\n\n  const no = col.length;\n  if (no === 1) return col[0];\n  const inc = noGradient ? 1 / no : 1 / (no - 1);\n  const colors = [];\n\n  for (let i = 0; i < col.length; i++) {\n    percentage = noGradient ? inc * (i + 1) : inc * i;\n    rval = parseInt(cutHex(col[i]).substring(0, 2), 16);\n    gval = parseInt(cutHex(col[i]).substring(2, 4), 16);\n    bval = parseInt(cutHex(col[i]).substring(4, 6), 16);\n    colors[i] = {\n      pct: percentage,\n      color: {\n        r: rval,\n        g: gval,\n        b: bval,\n      },\n    };\n  }\n\n  if (pct === 0) {\n    return `rgb(${[colors[0].color.r, colors[0].color.g, colors[0].color.b].join(',')})`;\n  }\n\n  for (let j = 0; j < colors.length; j++) {\n    if (pct <= colors[j].pct) {\n      if (noGradient) {\n        return `rgb(${[colors[j].color.r, colors[j].color.g, colors[j].color.b].join(',')})`;\n      } else {\n        lower = colors[j - 1];\n        upper = colors[j];\n        range = upper.pct - lower.pct;\n        rangePct = (pct - lower.pct) / range;\n        pctLower = 1 - rangePct;\n        pctUpper = rangePct;\n        color = {\n          r: Math.floor(lower.color.r * pctLower + upper.color.r * pctUpper),\n          g: Math.floor(lower.color.g * pctLower + upper.color.g * pctUpper),\n          b: Math.floor(lower.color.b * pctLower + upper.color.b * pctUpper),\n        };\n        return `rgb(${[color.r, color.g, color.b].join(',')})`;\n      }\n    }\n  }\n}\n", "/**\n * Number and text formatting utilities\n */\n\n/**\n * Format numbers with human-friendly suffixes (K, M, G, etc.)\n * @param {number} n - Number to format\n * @param {number} d - Decimal places\n * @returns {string} Formatted number with suffix\n */\nexport function humanFriendlyNumber(n, d) {\n  const d2 = Math.pow(10, d);\n  const s = ' KMGTPE';\n  let i = 0;\n  const c = 1000;\n\n  while ((n >= c || n <= -c) && ++i < s.length) {\n    n = n / c;\n  }\n\n  i = i >= s.length ? s.length - 1 : i;\n\n  return Math.round(n * d2) / d2 + s[i];\n}\n\n/**\n * Format numbers with comma separators\n * @param {number} x - Number to format\n * @returns {string} Formatted number with commas\n */\nexport function formatNumber(x) {\n  const parts = x.toString().split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return parts.join('.');\n}\n", "/**\n * @file JustGage - Modern ES6+ implementation of animated SVG gauges\n * @version 1.7.0\n * @author Bojan Djuricic <pindjur@gmail.com>\n * @license MIT\n */\n\nimport { createConfig } from './config.js';\nimport { SVGRenderer } from '../rendering/svg.js';\nimport { isNumber } from '../utils/helpers.js';\nimport { isHexColor, getColor } from '../utils/colors.js';\nimport { humanFriendlyNumber, formatNumber } from '../utils/formatters.js';\n\n/**\n * JustGage - Modern ES6+ implementation for creating animated SVG dashboard gauges.\n *\n * Features:\n * - Zero dependencies (native SVG APIs)\n * - ES6+ class-based architecture\n * - Full backward compatibility with v1.x\n * - Custom sectors and pointer support\n * - Responsive design\n * - Event system for interactions\n *\n * @class JustGage\n * @example\n * // Basic usage\n * const gauge = new JustGage({\n *   id: 'my-gauge',\n *   value: 75,\n *   min: 0,\n *   max: 100,\n *   title: 'Performance'\n * });\n *\n * // With custom colors\n * const colorGauge = new JustGage({\n *   id: 'color-gauge',\n *   value: 60,\n *   levelColors: ['#green', '#yellow', '#red'],\n *   customSectors: [\n *     { lo: 0, hi: 50, color: '#green' },\n *     { lo: 50, hi: 100, color: '#red' }\n *   ]\n * });\n */\nexport class JustGage {\n  /**\n   * Create a new gauge instance\n   *\n   * @param {object} config - Configuration options for the gauge\n   * @param {string} [config.id] - DOM element ID to render gauge (required if parentNode not provided)\n   * @param {HTMLElement} [config.parentNode] - DOM element to render gauge (required if id not provided)\n   * @param {number} [config.value=0] - Current gauge value\n   * @param {number} [config.min=0] - Minimum gauge value\n   * @param {number} [config.max=100] - Maximum gauge value\n   * @param {string} [config.title=''] - Gauge title text\n   * @param {string} [config.label=''] - Gauge label text\n   * @param {boolean} [config.reverse=false] - Reverse the gauge direction\n   * @param {number} [config.decimals=0] - Number of decimal places for value display\n   * @param {string|Array<string>} [config.levelColors=['#a9d70b', '#f9c802', '#ff0000']] - Colors for gauge levels\n   * @param {number} [config.startAngle=135] - Starting angle in degrees\n   * @param {number} [config.endAngle=45] - Ending angle in degrees\n   * @param {boolean} [config.pointer=false] - Show pointer instead of level fill\n   * @param {object} [config.pointerOptions={}] - Pointer configuration options\n   * @param {Array<object>} [config.customSectors=[]] - Custom color sectors\n   * @param {number} [config.width=400] - Gauge width in pixels\n   * @param {number} [config.height=320] - Gauge height in pixels\n   * @param {string} [config.gaugeColor='#edebeb'] - Background gauge color\n   * @param {number} [config.gaugeWidthScale=1.0] - Gauge width scale factor\n   * @param {boolean} [config.donut=false] - Create donut-style gauge\n   * @param {boolean} [config.counter=false] - Enable counter animation\n   * @param {string} [config.symbol=''] - Symbol to display with value\n   * @param {function} [config.textRenderer] - Custom text rendering function\n   * @param {function} [config.onAnimationEnd] - Animation end callback\n   * @throws {Error} When no configuration object is provided\n   * @throws {Error} When neither id nor parentNode is provided\n   * @throws {Error} When specified DOM element is not found\n   * @throws {Error} When min >= max\n   */\n  constructor(config) {\n    this.events = {};\n\n    // Validate required container\n    if (!config) {\n      throw new Error('JustGage: Configuration object is required');\n    }\n\n    // Get container element\n    if (config.id) {\n      this.node = document.getElementById(config.id);\n      if (!this.node) {\n        throw new Error(`JustGage: No element with id '${config.id}' found`);\n      }\n    } else if (config.parentNode) {\n      this.node = config.parentNode;\n    } else {\n      throw new Error('JustGage: Either id or parentNode must be provided');\n    }\n\n    // Get dataset attributes\n    const dataset = this.node.dataset || {};\n\n    // Create and validate configuration\n    this.config = createConfig(config, dataset);\n    this.originalValue = config.value ?? -1;\n\n    // Initialize gauge\n    this._initializeGauge();\n  }\n\n  /**\n   * Initialize the gauge rendering\n   * @private\n   */\n  _initializeGauge() {\n    // Determine dimensions like original JustGage\n    let width = this.config.width;\n    let height = this.config.height;\n\n    // If no dimensions specified, try to get from container\n    if (!width || !height) {\n      const rect = this.node.getBoundingClientRect();\n      if (!width) width = rect.width || 400;\n      if (!height) height = rect.height || 320;\n\n      // Update config with calculated dimensions\n      this.config.width = width;\n      this.config.height = height;\n    }\n\n    // Initialize SVG renderer\n    this.renderer = new SVGRenderer(this.node, width, height);\n\n    // Store references to drawn elements\n    this.canvas = {\n      gauge: null,\n      level: null,\n      title: null,\n      value: null,\n      min: null,\n      max: null,\n      pointer: null,\n    };\n\n    // Generate shadows if enabled\n    if (this.config.showInnerShadow) {\n      const defs =\n        this.renderer.svg.querySelector('defs') ||\n        this.renderer.svg.appendChild(\n          document.createElementNS('http://www.w3.org/2000/svg', 'defs')\n        );\n      this.generateShadow(this.renderer.svg, defs);\n    }\n\n    // Draw the gauge\n    this._drawGauge();\n  }\n\n  /**\n   * Draw the complete gauge\n   * @private\n   */\n  _drawGauge() {\n    const config = this.config;\n\n    // Calculate widget dimensions using original algorithm\n    const { widgetW, widgetH, dx, dy } = this._calculateGaugeGeometry();\n\n    // Draw gauge background using original path generation\n    const gaugePath = this.renderer.createGaugePath(\n      config.max,\n      config.min,\n      config.max,\n      widgetW,\n      widgetH,\n      dx,\n      dy,\n      config.gaugeWidthScale || 1.0,\n      config.donut,\n      config.differential\n    );\n\n    this.canvas.gauge = this.renderer.path(gaugePath).attr({\n      fill: config.gaugeColor,\n      stroke: 'none',\n    });\n\n    // Draw value level\n    this._drawLevel();\n\n    // Draw labels\n    this._drawLabels();\n\n    // Draw pointer if enabled\n    if (config.pointer) {\n      this._drawPointer();\n    }\n\n    // Draw target line if specified\n    if (config.targetLine !== null && config.targetLine !== undefined) {\n      this._drawTargetLine();\n    }\n  }\n\n  /**\n   * Draw the value level indicator\n   * @private\n   */\n  _drawLevel() {\n    const config = this.config;\n\n    // Use consistent geometry calculations\n    const { widgetW, widgetH, dx, dy } = this._calculateGaugeGeometry();\n\n    // Get level color\n    const color = this._getLevelColor(config.value);\n\n    // Draw level arc using original path generation\n    const levelPath = this.renderer.createGaugePath(\n      config.value,\n      config.min,\n      config.max,\n      widgetW,\n      widgetH,\n      dx,\n      dy,\n      config.gaugeWidthScale || 1.0,\n      config.donut,\n      config.differential\n    );\n\n    this.canvas.level = this.renderer.path(levelPath).attr({\n      fill: color,\n      stroke: 'none',\n    });\n  }\n\n  /**\n   * Calculate consistent gauge geometry for both arc and text positioning\n   * @private\n   */\n  _calculateGaugeGeometry() {\n    const config = this.config;\n    const w = config.width;\n    const h = config.height;\n\n    // Calculate widget dimensions and offsets like in _drawLabels\n    let widgetW, widgetH, dx, dy;\n    if (config.donut) {\n      if (w > h) {\n        widgetH = h;\n        widgetW = widgetH;\n      } else if (w < h) {\n        widgetW = w;\n        widgetH = widgetW;\n      } else {\n        widgetW = w;\n        widgetH = widgetW;\n      }\n      dx = (w - widgetW) / 2;\n      dy = (h - widgetH) / 2;\n    } else {\n      // For regular gauges, use original formula\n      if (w > h) {\n        widgetH = h;\n        widgetW = widgetH * 2;\n        if (widgetW > w) {\n          const aspect = widgetW / w;\n          widgetW = widgetW / aspect;\n          widgetH = widgetH / aspect;\n        }\n      } else if (w < h) {\n        widgetW = w;\n        widgetH = widgetW / 2;\n      } else {\n        widgetW = w;\n        widgetH = widgetW / 2;\n      }\n      dx = (w - widgetW) / 2;\n      dy = (h - widgetH) / 2;\n    }\n\n    // Calculate center point using widget positioning\n    const cx = dx + widgetW / 2;\n    const cy = config.donut ? dy + widgetH / 2 : dy + widgetH / 1.25;\n\n    // Calculate radii using widget width (not canvas width)\n    const outerRadius = config.donut ? widgetW / 2 - widgetW / 30 : widgetW / 2 - widgetW / 10;\n    const gaugeWidthScale = config.gaugeWidthScale || 1.0;\n    const innerRadius = outerRadius - (widgetW / 6.666666666666667) * gaugeWidthScale;\n\n    return { cx, cy, outerRadius, innerRadius, widgetW, widgetH, dx, dy };\n  }\n\n  /**\n   * Draw text labels\n   * @private\n   */\n  _drawLabels() {\n    const config = this.config;\n\n    // Use consistent geometry calculations\n    const { cx, cy, widgetW, widgetH, dx, dy } = this._calculateGaugeGeometry();\n\n    // Calculate proportional font sizes using original formulas, but allow config override\n    const titleFontSize = config.titleFontSize || Math.max(widgetH / 16, 10);\n    const valueFontSize = config.valueFontSize || (widgetH / 6.4 > 16 ? widgetH / 5.4 : 18);\n\n    // Title\n    if (config.title) {\n      this.canvas.title = this.renderer.text(cx, cy - widgetH / 16, config.title).attr({\n        'font-family': config.titleFontFamily,\n        'font-size': titleFontSize,\n        'font-weight': config.titleFontWeight,\n        'text-anchor': 'middle',\n        'dominant-baseline': 'central',\n        fill: config.titleFontColor,\n      });\n    }\n\n    // Value - use original positioning formula with proper offsets\n    const displayValue = this._formatValue(config.value);\n    const valueX = dx + widgetW / 2;\n    const valueY = config.donut ? cy : config.label ? dy + widgetH / 1.85 : dy + widgetH / 1.7;\n\n    this.canvas.value = this.renderer.text(valueX, valueY, displayValue).attr({\n      'font-family': config.valueFontFamily,\n      'font-size': valueFontSize,\n      'font-weight': config.valueFontWeight,\n      'text-anchor': 'middle',\n      'dominant-baseline': 'central',\n      fill: config.valueFontColor,\n    });\n\n    // Calculate label font size (used by both main label and min/max positioning)\n    const labelFontSize = config.labelFontSize || Math.max(widgetH / 16, 10);\n\n    // Main label (units like %, km/h, etc.)\n    if (config.label) {\n      const labelY = valueY + labelFontSize;\n\n      this.canvas.label = this.renderer.text(valueX, labelY, config.label).attr({\n        'font-family': config.labelFontFamily,\n        'font-size': labelFontSize,\n        'text-anchor': 'middle',\n        'dominant-baseline': 'central',\n        fill: config.labelFontColor,\n      });\n    }\n\n    // Min/Max labels\n    if (config.showMinMax && !config.hideMinMax) {\n      // Use original positioning formula with proper offsets\n      const gaugeWidthScale = config.gaugeWidthScale || 1.0;\n\n      // Use exact original positioning formula\n      // For donut: labelY = valueY + labelFontSize\n      // For regular: labelY = valueY + valueFontSize / 2 + 5\n      let minMaxLabelY;\n      if (config.donut) {\n        minMaxLabelY = valueY + labelFontSize;\n      } else {\n        // Use original formula exactly as in original JustGage\n        minMaxLabelY = valueY + valueFontSize / 2 + 5;\n      }\n\n      // Original positioning: based on widget width and scale with offsets\n      const minX = dx + widgetW / 10 + ((widgetW / 6.666666666666667) * gaugeWidthScale) / 2;\n      const maxX =\n        dx + widgetW - widgetW / 10 - ((widgetW / 6.666666666666667) * gaugeWidthScale) / 2;\n      const minY = minMaxLabelY;\n      const maxY = minMaxLabelY; // Determine min text based on configuration\n      let minText = config.min;\n      if (config.minTxt) {\n        minText = config.minTxt;\n      } else if (config.humanFriendly) {\n        minText = this._humanFriendlyNumber(config.min, config.humanFriendlyDecimal);\n      } else if (config.formatNumber) {\n        minText = this._formatNumber(config.min);\n      }\n\n      // Determine max text based on configuration\n      let maxText = config.max;\n      if (config.maxTxt) {\n        maxText = config.maxTxt;\n      } else if (config.humanFriendly) {\n        maxText = this._humanFriendlyNumber(config.max, config.humanFriendlyDecimal);\n      } else if (config.formatNumber) {\n        maxText = this._formatNumber(config.max);\n      }\n\n      // Calculate proportional min/max label font size\n      const minMaxLabelFontSize = config.minMaxLabelFontSize || Math.max(widgetH / 16, 10);\n\n      if (!config.reverse) {\n        this.canvas.min = this.renderer.text(minX, minY, minText).attr({\n          'font-family': config.labelFontFamily,\n          'font-size': minMaxLabelFontSize,\n          'text-anchor': 'middle',\n          'dominant-baseline': 'central',\n          fill: config.labelFontColor,\n        });\n\n        this.canvas.max = this.renderer.text(maxX, maxY, maxText).attr({\n          'font-family': config.labelFontFamily,\n          'font-size': minMaxLabelFontSize,\n          'text-anchor': 'middle',\n          'dominant-baseline': 'central',\n          fill: config.labelFontColor,\n        });\n      } else {\n        // Reverse positions for reversed gauge\n        this.canvas.min = this.renderer.text(maxX, maxY, minText).attr({\n          'font-family': config.labelFontFamily,\n          'font-size': minMaxLabelFontSize,\n          'text-anchor': 'middle',\n          'dominant-baseline': 'central',\n          fill: config.labelFontColor,\n        });\n\n        this.canvas.max = this.renderer.text(minX, minY, maxText).attr({\n          'font-family': config.labelFontFamily,\n          'font-size': minMaxLabelFontSize,\n          'text-anchor': 'middle',\n          'dominant-baseline': 'central',\n          fill: config.labelFontColor,\n        });\n      }\n    }\n  }\n\n  /**\n   * Draw gauge pointer\n   * @private\n   */\n  _drawPointer() {\n    const config = this.config;\n    const { cx, cy, outerRadius, widgetW } = this._calculateGaugeGeometry();\n\n    // Calculate pointer angle\n    const range = config.max - config.min;\n    const ratio = (config.value - config.min) / range;\n\n    // Handle angle wrapping (e.g., 135\u00B0 to 45\u00B0 should be a 270\u00B0 span)\n    let angleRange = config.endAngle - config.startAngle;\n    if (angleRange <= 0) {\n      angleRange += 360; // Wrap around for crossing 0\u00B0\n    }\n\n    const angle = config.startAngle + ratio * angleRange;\n\n    // Calculate pointer dimensions using widget-based formulas\n    const topLength = config.pointerOptions.toplength || (widgetW * 3.5) / 100;\n    const pointerLength = outerRadius + topLength;\n    const pointerWidth = config.pointerOptions.bottomwidth || widgetW / 100;\n\n    // Draw pointer\n    this.canvas.pointer = this.renderer.pointer(cx, cy, pointerLength, pointerWidth, angle).attr({\n      fill: config.pointerOptions.color || '#000000',\n      stroke: 'none',\n    });\n  }\n\n  /**\n   * Draw target line at specified value\n   * @private\n   */\n  _drawTargetLine() {\n    const config = this.config;\n    const { cx, cy, outerRadius, innerRadius } = this._calculateGaugeGeometry();\n\n    // Calculate angle for target value\n    const range = config.max - config.min;\n    const ratio = (config.targetLine - config.min) / range;\n\n    // Handle angle wrapping (e.g., 135\u00B0 to 45\u00B0 should be a 270\u00B0 span)\n    let angleRange = config.endAngle - config.startAngle;\n    if (angleRange <= 0) {\n      angleRange += 360; // Wrap around for crossing 0\u00B0\n    }\n\n    let targetAngle = config.startAngle + ratio * angleRange;\n\n    if (config.reverse) {\n      targetAngle = config.startAngle + (1 - ratio) * angleRange;\n    }\n\n    const targetAngleRad = ((targetAngle - 90) * Math.PI) / 180;\n\n    // Calculate line coordinates using gauge geometry\n    const lineInnerRadius = innerRadius * 0.9;\n    const lineOuterRadius = outerRadius * 1.05;\n\n    const x1 = cx + lineInnerRadius * Math.cos(targetAngleRad);\n    const y1 = cy + lineInnerRadius * Math.sin(targetAngleRad);\n    const x2 = cx + lineOuterRadius * Math.cos(targetAngleRad);\n    const y2 = cy + lineOuterRadius * Math.sin(targetAngleRad);\n\n    // Draw target line\n    this.canvas.targetLine = this.renderer.line(x1, y1, x2, y2).attr({\n      stroke: config.targetLineColor,\n      'stroke-width': config.targetLineWidth,\n      'stroke-linecap': 'round',\n    });\n  }\n\n  /**\n   * Get level color based on value\n   * @private\n   */\n  _getLevelColor(value) {\n    const config = this.config;\n    const range = config.max - config.min;\n    const ratio = (value - config.min) / range;\n\n    // Use the same getColor function as the original JustGage\n    return getColor(value, ratio, config.levelColors, config.noGradient, config.customSectors);\n  }\n\n  /**\n   * Format value for display\n   * @private\n   */\n  _formatValue(value) {\n    const config = this.config;\n    let displayVal = value;\n\n    if (config.textRenderer && typeof config.textRenderer === 'function') {\n      const renderedValue = config.textRenderer(displayVal);\n      if (renderedValue !== false) {\n        return renderedValue;\n      }\n    }\n\n    if (config.humanFriendly) {\n      displayVal =\n        this._humanFriendlyNumber(displayVal, config.humanFriendlyDecimal) + config.symbol;\n    } else if (config.formatNumber) {\n      displayVal = this._formatNumber((displayVal * 1).toFixed(config.decimals)) + config.symbol;\n    } else if (config.displayRemaining) {\n      displayVal = ((config.max - displayVal) * 1).toFixed(config.decimals) + config.symbol;\n    } else {\n      displayVal = (displayVal * 1).toFixed(config.decimals) + config.symbol;\n    }\n\n    return displayVal;\n  }\n\n  /**\n   * Convert large numbers to human friendly format (e.g. 1234567 -> 1.23M)\n   * @param {number} n - Number to format\n   * @param {number} d - Decimal places\n   * @returns {string} Human friendly number\n   * @private\n   */\n  _humanFriendlyNumber(n, d) {\n    return humanFriendlyNumber(n, d);\n  }\n\n  /**\n   * Format number with commas\n   * @param {string|number} x - Number to format\n   * @returns {string} Formatted number\n   * @private\n   */\n  _formatNumber(x) {\n    return formatNumber(x);\n  }\n\n  /**\n   * Refresh gauge with new values\n   * @param {number} val - New value\n   * @param {number} [max] - New maximum value\n   * @param {number} [min] - New minimum value\n   * @param {string} [label] - New label\n   */\n  refresh(val, max, min, label) {\n    if (!isNumber(val)) {\n      throw new Error('JustGage: refresh() requires a numeric value');\n    }\n\n    const displayVal = val;\n\n    // Update label if provided\n    if (label !== null && label !== undefined) {\n      this.config.label = label;\n      if (this.canvas.label) {\n        this.canvas.label.attr({ text: this.config.label });\n      }\n    }\n\n    // Update minimum value if provided\n    if (isNumber(min)) {\n      this.config.min = min;\n\n      // Update min text display\n      if (this.canvas.min) {\n        let minText = this.config.min;\n        if (this.config.minTxt) {\n          minText = this.config.minTxt;\n        } else if (this.config.humanFriendly) {\n          minText = this._humanFriendlyNumber(this.config.min, this.config.humanFriendlyDecimal);\n        } else if (this.config.formatNumber) {\n          minText = this._formatNumber(this.config.min);\n        }\n\n        this.canvas.min.attr({ text: minText });\n      }\n    }\n\n    // Update maximum value if provided\n    if (isNumber(max)) {\n      this.config.max = max;\n\n      // Update max text display\n      if (this.canvas.max) {\n        let maxText = this.config.max;\n        if (this.config.maxTxt) {\n          maxText = this.config.maxTxt;\n        } else if (this.config.humanFriendly) {\n          maxText = this._humanFriendlyNumber(this.config.max, this.config.humanFriendlyDecimal);\n        } else if (this.config.formatNumber) {\n          maxText = this._formatNumber(this.config.max);\n        }\n\n        this.canvas.max.attr({ text: maxText });\n      }\n    }\n\n    // Validate and clamp value bounds\n    if (val * 1 > this.config.max * 1) {\n      val = this.config.max * 1;\n    }\n    if (val * 1 < this.config.min * 1) {\n      val = this.config.min * 1;\n    }\n\n    this.config.value = val * 1;\n\n    // Get color for the new value (will be applied when level is redrawn)\n\n    // Update value display\n    if (!this.config.counter && this.canvas.value) {\n      const formattedValue = this._formatValue(displayVal);\n      this.canvas.value.attr({ text: formattedValue });\n    }\n\n    // Animation values will be calculated during redraw\n\n    // Animate level change with proper color\n    if (this.canvas.level) {\n      // For now, remove and redraw - later we can add proper animation\n      this.canvas.level.remove();\n      this._drawLevel();\n    }\n\n    // Animate pointer if enabled\n    if (this.config.pointer && this.canvas.pointer) {\n      this.canvas.pointer.remove();\n      this._drawPointer();\n    }\n\n    // Call animation end callback if provided\n    if (this.config.onAnimationEnd && typeof this.config.onAnimationEnd === 'function') {\n      setTimeout(() => {\n        this.config.onAnimationEnd.call(this);\n      }, this.config.refreshAnimationTime);\n    }\n  }\n\n  /**\n   * Update gauge appearance options\n   * @param {object|string} options - Options object or option name\n   * @param {any} [val] - Option value (if options is string)\n   */\n  update(options, val) {\n    if (typeof options === 'string') {\n      this._updateProperty(options, val);\n    } else if (options && typeof options === 'object') {\n      for (const [option, value] of Object.entries(options)) {\n        this._updateProperty(option, value);\n      }\n    }\n  }\n\n  /**\n   * Update a single property\n   * @param {string} option - Property name\n   * @param {any} val - Property value\n   * @private\n   */\n  _updateProperty(option, val) {\n    switch (option) {\n      case 'valueFontColor':\n        if (!isHexColor(val)) {\n          console.warn('JustGage: valueFontColor must be a valid hex color'); // eslint-disable-line no-console\n          return;\n        }\n        this.config.valueFontColor = val;\n        if (this.canvas.value) {\n          this.canvas.value.attr({ fill: val });\n        }\n        break;\n\n      case 'labelFontColor':\n        if (!isHexColor(val)) {\n          console.warn('JustGage: labelFontColor must be a valid hex color'); // eslint-disable-line no-console\n          return;\n        }\n        this.config.labelFontColor = val;\n        // Update all label elements\n        if (this.canvas.min) {\n          this.canvas.min.attr({ fill: val });\n        }\n        if (this.canvas.max) {\n          this.canvas.max.attr({ fill: val });\n        }\n        if (this.canvas.label) {\n          this.canvas.label.attr({ fill: val });\n        }\n        break;\n\n      case 'gaugeColor':\n        this.config.gaugeColor = val;\n        if (this.canvas.background) {\n          this.canvas.background.attr({ fill: val });\n        }\n        break;\n\n      case 'levelColors':\n        this.config.levelColors = val;\n        // Redraw level with new colors\n        if (this.canvas.level) {\n          this.canvas.level.remove();\n          this._drawLevel();\n        }\n        break;\n\n      case 'targetLine':\n        this.config.targetLine = val;\n        // Remove existing target line\n        if (this.canvas.targetLine) {\n          this.canvas.targetLine.remove();\n          this.canvas.targetLine = null;\n        }\n        // Draw new target line if value is set\n        if (val !== null && val !== undefined) {\n          this._drawTargetLine();\n        }\n        break;\n\n      case 'targetLineColor':\n        this.config.targetLineColor = val;\n        if (this.canvas.targetLine) {\n          this.canvas.targetLine.attr({ stroke: val });\n        }\n        break;\n\n      case 'targetLineWidth':\n        this.config.targetLineWidth = val;\n        if (this.canvas.targetLine) {\n          this.canvas.targetLine.attr({ 'stroke-width': val });\n        }\n        break;\n\n      case 'symbol':\n        this.config.symbol = val;\n        if (this.canvas.value) {\n          const displayValue = this._formatValue(this.config.value);\n          this.canvas.value.attr({ text: displayValue });\n        }\n        break;\n\n      case 'decimals':\n        this.config.decimals = val;\n        if (this.canvas.value) {\n          const displayValue = this._formatValue(this.config.value);\n          this.canvas.value.attr({ text: displayValue });\n        }\n        break;\n\n      default:\n        console.warn(`JustGage: \"${option}\" is not a supported update setting`); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Update visual elements\n   * @private\n   */\n  _updateVisuals() {\n    if (!this.canvas || !this.renderer) return;\n\n    // Update value level\n    if (this.canvas.level) {\n      this.canvas.level.remove();\n    }\n    this._drawLevel();\n\n    // Update value text\n    if (this.canvas.value) {\n      const displayValue = this._formatValue(this.config.value);\n      this.canvas.value.text(displayValue);\n    }\n\n    // Update pointer if enabled\n    if (this.config.pointer && this.canvas.pointer) {\n      this.canvas.pointer.remove();\n      this._drawPointer();\n    }\n  }\n\n  /**\n   * Destroy the gauge and clean up resources\n   */\n  destroy() {\n    // Clean up SVG renderer\n    if (this.renderer) {\n      this.renderer.remove();\n    }\n\n    // Clear container\n    if (this.node?.parentNode) {\n      this.node.innerHTML = '';\n    }\n\n    // Clean up event listeners\n    for (const event in this.events) {\n      delete this.events[event];\n    }\n\n    // Clear references\n    this.node = null;\n    this.config = null;\n    this.events = {};\n    this.renderer = null;\n    this.canvas = null;\n  }\n\n  /**\n   * Get current gauge value\n   * @returns {number} Current value\n   */\n  getValue() {\n    return this.config.value;\n  }\n\n  /**\n   * Get current configuration\n   * @returns {object} Current configuration\n   */\n  getConfig() {\n    return { ...this.config };\n  }\n\n  /**\n   * Add event listener\n   * @param {string} eventName - Event name\n   * @param {Function} callback - Event callback\n   */\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = [];\n    }\n    this.events[eventName].push(callback);\n  }\n\n  /**\n   * Remove event listener\n   * @param {string} eventName - Event name\n   * @param {Function} [callback] - Specific callback to remove\n   */\n  off(eventName, callback) {\n    if (!this.events[eventName]) return;\n\n    if (callback) {\n      const index = this.events[eventName].indexOf(callback);\n      if (index > -1) {\n        this.events[eventName].splice(index, 1);\n      }\n    } else {\n      this.events[eventName] = [];\n    }\n  }\n\n  /**\n   * Emit event\n   * @param {string} eventName - Event name\n   * @param {...any} args - Event arguments\n   * @private\n   */\n  _emit(eventName, ...args) {\n    if (this.events[eventName]) {\n      this.events[eventName].forEach(callback => {\n        try {\n          callback.apply(this, args);\n        } catch (error) {\n          console.error(`JustGage: Error in ${eventName} event handler:`, error); // eslint-disable-line no-console\n        }\n      });\n    }\n  }\n\n  /**\n   * Generate shadow filter for inner shadow effect\n   * @param {SVGElement} svg - SVG element\n   * @param {SVGElement} defs - Defs element for filters\n   */\n  generateShadow(svg, defs) {\n    const config = this.config;\n    const shadowId = 'inner-shadow-' + (config.id || config.classId);\n\n    // Create filter element\n    const filter = document.createElementNS('http://www.w3.org/2000/svg', 'filter');\n    filter.setAttribute('id', shadowId);\n    defs.appendChild(filter);\n\n    // Create offset for shadow\n    const feOffset = document.createElementNS('http://www.w3.org/2000/svg', 'feOffset');\n    feOffset.setAttribute('dx', 0);\n    feOffset.setAttribute('dy', config.shadowVerticalOffset);\n    filter.appendChild(feOffset);\n\n    // Create blur effect\n    const feGaussianBlur = document.createElementNS('http://www.w3.org/2000/svg', 'feGaussianBlur');\n    feGaussianBlur.setAttribute('result', 'offset-blur');\n    feGaussianBlur.setAttribute('stdDeviation', config.shadowSize);\n    filter.appendChild(feGaussianBlur);\n\n    // Create composite for inverse\n    const feComposite1 = document.createElementNS('http://www.w3.org/2000/svg', 'feComposite');\n    feComposite1.setAttribute('operator', 'out');\n    feComposite1.setAttribute('in', 'SourceGraphic');\n    feComposite1.setAttribute('in2', 'offset-blur');\n    feComposite1.setAttribute('result', 'inverse');\n    filter.appendChild(feComposite1);\n\n    // Create flood for shadow color\n    const feFlood = document.createElementNS('http://www.w3.org/2000/svg', 'feFlood');\n    feFlood.setAttribute('flood-color', 'black');\n    feFlood.setAttribute('flood-opacity', config.shadowOpacity);\n    feFlood.setAttribute('result', 'color');\n    filter.appendChild(feFlood);\n\n    // Create composite for shadow\n    const feComposite2 = document.createElementNS('http://www.w3.org/2000/svg', 'feComposite');\n    feComposite2.setAttribute('operator', 'in');\n    feComposite2.setAttribute('in', 'color');\n    feComposite2.setAttribute('in2', 'inverse');\n    feComposite2.setAttribute('result', 'shadow');\n    filter.appendChild(feComposite2);\n\n    // Create final composite\n    const feComposite3 = document.createElementNS('http://www.w3.org/2000/svg', 'feComposite');\n    feComposite3.setAttribute('operator', 'over');\n    feComposite3.setAttribute('in', 'shadow');\n    feComposite3.setAttribute('in2', 'SourceGraphic');\n    filter.appendChild(feComposite3);\n\n    // Apply shadow filter if enabled\n    if (config.showInnerShadow) {\n      // Apply to gauge background and level elements\n      if (this.canvas.background) {\n        this.canvas.background.attr({ filter: `url(#${shadowId})` });\n      }\n      if (this.canvas.level) {\n        this.canvas.level.attr({ filter: `url(#${shadowId})` });\n      }\n    }\n\n    return shadowId;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
